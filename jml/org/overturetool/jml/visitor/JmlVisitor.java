//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Mon 07-Jul-2008 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 06-Jun-2008 09:02:11)
//
// Supported compilers:
// jdk1.4
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.jml.visitor;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import org.overturetool.jml.ast.itf.*;
// ***** VDMTOOLS END Name=imports



public class JmlVisitor implements IJmlVisitor {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp


// ***** VDMTOOLS START Name=JmlVisitor KEEP=NO
  public JmlVisitor () throws CGException {}
// ***** VDMTOOLS END Name=JmlVisitor


// ***** VDMTOOLS START Name=visitDocument KEEP=NO
  public void visitDocument (final IJmlDocument var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitDocument


// ***** VDMTOOLS START Name=visitLexem KEEP=NO
  public void visitLexem (final IJmlLexem var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitLexem


// ***** VDMTOOLS START Name=visitThisExpression KEEP=NO
  public void visitThisExpression (final IJmlThisExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitThisExpression


// ***** VDMTOOLS START Name=visitPrimaryExpressionKeyword KEEP=NO
  public void visitPrimaryExpressionKeyword (final IJmlPrimaryExpressionKeyword var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitPrimaryExpressionKeyword


// ***** VDMTOOLS START Name=visitModelImport KEEP=NO
  public void visitModelImport (final IJmlModelImport var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitModelImport


// ***** VDMTOOLS START Name=visitClass KEEP=NO
  public void visitClass (final IJmlClass var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitClass


// ***** VDMTOOLS START Name=visitSpecifications KEEP=NO
  public void visitSpecifications (final IJmlSpecifications var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSpecifications


// ***** VDMTOOLS START Name=visitMapValueToValueType KEEP=NO
  public void visitMapValueToValueType (final IJmlMapValueToValueType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMapValueToValueType


// ***** VDMTOOLS START Name=visitMapLet KEEP=NO
  public void visitMapLet (final IJmlMapLet var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMapLet


// ***** VDMTOOLS START Name=visitValueShape KEEP=NO
  public void visitValueShape (final IJmlValueShape var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitValueShape


// ***** VDMTOOLS START Name=visitNotKeywordUnary KEEP=NO
  public void visitNotKeywordUnary (final IJmlNotKeywordUnary var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNotKeywordUnary


// ***** VDMTOOLS START Name=visitBinaryExpression KEEP=NO
  public void visitBinaryExpression (final IJmlBinaryExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBinaryExpression


// ***** VDMTOOLS START Name=visitThisKeyword KEEP=NO
  public void visitThisKeyword (final IJmlThisKeyword var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitThisKeyword


// ***** VDMTOOLS START Name=visitOperationDefinitions KEEP=NO
  public void visitOperationDefinitions (final IJmlOperationDefinitions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOperationDefinitions


// ***** VDMTOOLS START Name=visitClassType KEEP=NO
  public void visitClassType (final IJmlClassType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitClassType


// ***** VDMTOOLS START Name=visitInstanceVariableDefinitions KEEP=NO
  public void visitInstanceVariableDefinitions (final IJmlInstanceVariableDefinitions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInstanceVariableDefinitions


// ***** VDMTOOLS START Name=visitEnsuresClause KEEP=NO
  public void visitEnsuresClause (final IJmlEnsuresClause var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitEnsuresClause


// ***** VDMTOOLS START Name=visitExpressionsList KEEP=NO
  public void visitExpressionsList (final IJmlExpressionsList var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExpressionsList


// ***** VDMTOOLS START Name=visitFieldSelectExpression KEEP=NO
  public void visitFieldSelectExpression (final IJmlFieldSelectExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFieldSelectExpression


// ***** VDMTOOLS START Name=visitEnumerationType KEEP=NO
  public void visitEnumerationType (final IJmlEnumerationType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitEnumerationType


// ***** VDMTOOLS START Name=visitUndefinedExpression KEEP=NO
  public void visitUndefinedExpression (final IJmlUndefinedExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitUndefinedExpression


// ***** VDMTOOLS START Name=visitFloatLiteral KEEP=NO
  public void visitFloatLiteral (final IJmlFloatLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFloatLiteral


// ***** VDMTOOLS START Name=visitSuperKeyword KEEP=NO
  public void visitSuperKeyword (final IJmlSuperKeyword var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSuperKeyword


// ***** VDMTOOLS START Name=visitClassKeyword KEEP=NO
  public void visitClassKeyword (final IJmlClassKeyword var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitClassKeyword


// ***** VDMTOOLS START Name=visitRequiresClause KEEP=NO
  public void visitRequiresClause (final IJmlRequiresClause var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitRequiresClause


// ***** VDMTOOLS START Name=visitExceptionType KEEP=NO
  public void visitExceptionType (final IJmlExceptionType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExceptionType


// ***** VDMTOOLS START Name=visitMapEnumeration KEEP=NO
  public void visitMapEnumeration (final IJmlMapEnumeration var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMapEnumeration


// ***** VDMTOOLS START Name=visitThrowExpression KEEP=NO
  public void visitThrowExpression (final IJmlThrowExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitThrowExpression


// ***** VDMTOOLS START Name=visitNameId KEEP=NO
  public void visitNameId (final IJmlNameId var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNameId


// ***** VDMTOOLS START Name=visitOtherDefinitions KEEP=NO
  public void visitOtherDefinitions (final IJmlOtherDefinitions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOtherDefinitions


// ***** VDMTOOLS START Name=visitSetValueType KEEP=NO
  public void visitSetValueType (final IJmlSetValueType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSetValueType


// ***** VDMTOOLS START Name=visitStarKeyword KEEP=NO
  public void visitStarKeyword (final IJmlStarKeyword var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitStarKeyword


// ***** VDMTOOLS START Name=visitPrimaryExpressions KEEP=NO
  public void visitPrimaryExpressions (final IJmlPrimaryExpressions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitPrimaryExpressions


// ***** VDMTOOLS START Name=visitOldName KEEP=NO
  public void visitOldName (final IJmlOldName var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOldName


// ***** VDMTOOLS START Name=visitAssignableClause KEEP=NO
  public void visitAssignableClause (final IJmlAssignableClause var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitAssignableClause


// ***** VDMTOOLS START Name=visitForAllExpression KEEP=NO
  public void visitForAllExpression (final IJmlForAllExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitForAllExpression


// ***** VDMTOOLS START Name=visitNumericalLiteral KEEP=NO
  public void visitNumericalLiteral (final IJmlNumericalLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNumericalLiteral


// ***** VDMTOOLS START Name=visitLiteralExpression KEEP=NO
  public void visitLiteralExpression (final IJmlLiteralExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitLiteralExpression


// ***** VDMTOOLS START Name=visitIfExpression KEEP=NO
  public void visitIfExpression (final IJmlIfExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIfExpression


// ***** VDMTOOLS START Name=visitVariable KEEP=NO
  public void visitVariable (final IJmlVariable var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitVariable


// ***** VDMTOOLS START Name=visitInvariantDefinition KEEP=NO
  public void visitInvariantDefinition (final IJmlInvariantDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInvariantDefinition


// ***** VDMTOOLS START Name=visitValueDefinition KEEP=NO
  public void visitValueDefinition (final IJmlValueDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitValueDefinition


// ***** VDMTOOLS START Name=visitUnaryExpression KEEP=NO
  public void visitUnaryExpression (final IJmlUnaryExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitUnaryExpression


// ***** VDMTOOLS START Name=visitApplyExpression KEEP=NO
  public void visitApplyExpression (final IJmlApplyExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitApplyExpression


// ***** VDMTOOLS START Name=visitExceptionalSpec KEEP=NO
  public void visitExceptionalSpec (final IJmlExceptionalSpec var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExceptionalSpec


// ***** VDMTOOLS START Name=visitNatType KEEP=NO
  public void visitNatType (final IJmlNatType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNatType


// ***** VDMTOOLS START Name=visitOldKeywordUnary KEEP=NO
  public void visitOldKeywordUnary (final IJmlOldKeywordUnary var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOldKeywordUnary


// ***** VDMTOOLS START Name=visitSetEnumeration KEEP=NO
  public void visitSetEnumeration (final IJmlSetEnumeration var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSetEnumeration


// ***** VDMTOOLS START Name=visitQuantifierDeclaration KEEP=NO
  public void visitQuantifierDeclaration (final IJmlQuantifierDeclaration var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitQuantifierDeclaration


// ***** VDMTOOLS START Name=visitTupleType KEEP=NO
  public void visitTupleType (final IJmlTupleType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTupleType


// ***** VDMTOOLS START Name=visitEnumLiteral KEEP=NO
  public void visitEnumLiteral (final IJmlEnumLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitEnumLiteral


// ***** VDMTOOLS START Name=visitImport KEEP=NO
  public void visitImport (final IJmlImport var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitImport


// ***** VDMTOOLS START Name=visitPostfixExpression KEEP=NO
  public void visitPostfixExpression (final IJmlPostfixExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitPostfixExpression


// ***** VDMTOOLS START Name=visitCharType KEEP=NO
  public void visitCharType (final IJmlCharType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCharType


// ***** VDMTOOLS START Name=visitCharacterLiteral KEEP=NO
  public void visitCharacterLiteral (final IJmlCharacterLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCharacterLiteral


// ***** VDMTOOLS START Name=visitNullLiteral KEEP=NO
  public void visitNullLiteral (final IJmlNullLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNullLiteral


// ***** VDMTOOLS START Name=visitValueDefinitions KEEP=NO
  public void visitValueDefinitions (final IJmlValueDefinitions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitValueDefinitions


// ***** VDMTOOLS START Name=visitBracketedExpression KEEP=NO
  public void visitBracketedExpression (final IJmlBracketedExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBracketedExpression


// ***** VDMTOOLS START Name=visitNotAssignedKeyword KEEP=NO
  public void visitNotAssignedKeyword (final IJmlNotAssignedKeyword var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNotAssignedKeyword


// ***** VDMTOOLS START Name=visitStringLiteral KEEP=NO
  public void visitStringLiteral (final IJmlStringLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitStringLiteral


// ***** VDMTOOLS START Name=visitSpecs KEEP=NO
  public void visitSpecs (final IJmlSpecs var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSpecs


// ***** VDMTOOLS START Name=visitAccessDefinition KEEP=NO
  public void visitAccessDefinition (final IJmlAccessDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitAccessDefinition


// ***** VDMTOOLS START Name=visitNewExpression KEEP=NO
  public void visitNewExpression (final IJmlNewExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNewExpression


// ***** VDMTOOLS START Name=visitBehaviourSpec KEEP=NO
  public void visitBehaviourSpec (final IJmlBehaviourSpec var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBehaviourSpec


// ***** VDMTOOLS START Name=visitInstanceOfExpression KEEP=NO
  public void visitInstanceOfExpression (final IJmlInstanceOfExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInstanceOfExpression


// ***** VDMTOOLS START Name=visitName KEEP=NO
  public void visitName (final IJmlName var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitName


// ***** VDMTOOLS START Name=visitInvariantDefinitions KEEP=NO
  public void visitInvariantDefinitions (final IJmlInvariantDefinitions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInvariantDefinitions


// ***** VDMTOOLS START Name=visitSuperKeywordSuffix KEEP=NO
  public void visitSuperKeywordSuffix (final IJmlSuperKeywordSuffix var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSuperKeywordSuffix


// ***** VDMTOOLS START Name=visitFloatType KEEP=NO
  public void visitFloatType (final IJmlFloatType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFloatType


// ***** VDMTOOLS START Name=visitBooleanLiteral KEEP=NO
  public void visitBooleanLiteral (final IJmlBooleanLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBooleanLiteral


// ***** VDMTOOLS START Name=visitObjectType KEEP=NO
  public void visitObjectType (final IJmlObjectType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitObjectType


// ***** VDMTOOLS START Name=visitVoidType KEEP=NO
  public void visitVoidType (final IJmlVoidType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitVoidType


// ***** VDMTOOLS START Name=visitExistsExpression KEEP=NO
  public void visitExistsExpression (final IJmlExistsExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExistsExpression


// ***** VDMTOOLS START Name=visitOldKeyword KEEP=NO
  public void visitOldKeyword (final IJmlOldKeyword var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOldKeyword


// ***** VDMTOOLS START Name=visitClassInheritanceClause KEEP=NO
  public void visitClassInheritanceClause (final IJmlClassInheritanceClause var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitClassInheritanceClause


// ***** VDMTOOLS START Name=visitBody KEEP=NO
  public void visitBody (final IJmlBody var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBody


// ***** VDMTOOLS START Name=visitField KEEP=NO
  public void visitField (final IJmlField var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitField


// ***** VDMTOOLS START Name=visitNullKeyword KEEP=NO
  public void visitNullKeyword (final IJmlNullKeyword var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNullKeyword


// ***** VDMTOOLS START Name=visitInterfaceInheritanceClause KEEP=NO
  public void visitInterfaceInheritanceClause (final IJmlInterfaceInheritanceClause var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInterfaceInheritanceClause


// ***** VDMTOOLS START Name=visitMethodSpecifications KEEP=NO
  public void visitMethodSpecifications (final IJmlMethodSpecifications var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMethodSpecifications


// ***** VDMTOOLS START Name=visitException KEEP=NO
  public void visitException (final IJmlException var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitException


// ***** VDMTOOLS START Name=visitNormalSpec KEEP=NO
  public void visitNormalSpec (final IJmlNormalSpec var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNormalSpec


// ***** VDMTOOLS START Name=visitPrimaryExpressionLiteral KEEP=NO
  public void visitPrimaryExpressionLiteral (final IJmlPrimaryExpressionLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitPrimaryExpressionLiteral


// ***** VDMTOOLS START Name=visitIntegerType KEEP=NO
  public void visitIntegerType (final IJmlIntegerType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIntegerType


// ***** VDMTOOLS START Name=visitSeqValueType KEEP=NO
  public void visitSeqValueType (final IJmlSeqValueType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSeqValueType


// ***** VDMTOOLS START Name=visitBlockExpression KEEP=NO
  public void visitBlockExpression (final IJmlBlockExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBlockExpression


// ***** VDMTOOLS START Name=visitSignalsClause KEEP=NO
  public void visitSignalsClause (final IJmlSignalsClause var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSignalsClause


// ***** VDMTOOLS START Name=visitParameter KEEP=NO
  public void visitParameter (final IJmlParameter var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitParameter


// ***** VDMTOOLS START Name=visitSequenceEnumeration KEEP=NO
  public void visitSequenceEnumeration (final IJmlSequenceEnumeration var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSequenceEnumeration


// ***** VDMTOOLS START Name=visitResultKeyword KEEP=NO
  public void visitResultKeyword (final IJmlResultKeyword var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitResultKeyword


// ***** VDMTOOLS START Name=visitClassName KEEP=NO
  public void visitClassName (final IJmlClassName var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitClassName


// ***** VDMTOOLS START Name=visitBoolType KEEP=NO
  public void visitBoolType (final IJmlBoolType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBoolType


// ***** VDMTOOLS START Name=visitOperationDefinition KEEP=NO
  public void visitOperationDefinition (final IJmlOperationDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOperationDefinition


// ***** VDMTOOLS START Name=visitWrappedJmlClass KEEP=NO
  public void visitWrappedJmlClass (final IJmlWrappedJmlClass var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitWrappedJmlClass


// ***** VDMTOOLS START Name=visitThisKeywordSuffix KEEP=NO
  public void visitThisKeywordSuffix (final IJmlThisKeywordSuffix var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitThisKeywordSuffix


// ***** VDMTOOLS START Name=visitContextInfo KEEP=NO
  public void visitContextInfo (final IJmlContextInfo var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitContextInfo


// ***** VDMTOOLS START Name=visitNode KEEP=NO
  public void visitNode (final IJmlNode pNode) throws CGException {
    if (new Boolean(pNode instanceof IJmlPrimaryExpressionKeyword).booleanValue()) 
      visitPrimaryExpressionKeyword((IJmlPrimaryExpressionKeyword) pNode);
    else 
      if (new Boolean(pNode instanceof IJmlClass).booleanValue()) 
        visitClass((IJmlClass) pNode);
      else {
        if (new Boolean(pNode instanceof IJmlSpecifications).booleanValue()) 
          visitSpecifications((IJmlSpecifications) pNode);
        else {
          if (new Boolean(pNode instanceof IJmlMapLet).booleanValue()) 
            visitMapLet((IJmlMapLet) pNode);
          else {
            if (new Boolean(pNode instanceof IJmlMapValueToValueType).booleanValue()) 
              visitMapValueToValueType((IJmlMapValueToValueType) pNode);
            else {
              if (new Boolean(pNode instanceof IJmlBinaryExpression).booleanValue()) 
                visitBinaryExpression((IJmlBinaryExpression) pNode);
              else {
                if (new Boolean(pNode instanceof IJmlValueShape).booleanValue()) 
                  visitValueShape((IJmlValueShape) pNode);
                else {
                  if (new Boolean(pNode instanceof IJmlThisKeyword).booleanValue()) 
                    visitThisKeyword((IJmlThisKeyword) pNode);
                  else {
                    if (new Boolean(pNode instanceof IJmlOperationDefinitions).booleanValue()) 
                      visitOperationDefinitions((IJmlOperationDefinitions) pNode);
                    else {
                      if (new Boolean(pNode instanceof IJmlClassType).booleanValue()) 
                        visitClassType((IJmlClassType) pNode);
                      else {
                        if (new Boolean(pNode instanceof IJmlInstanceVariableDefinitions).booleanValue()) 
                          visitInstanceVariableDefinitions((IJmlInstanceVariableDefinitions) pNode);
                        else {
                          if (new Boolean(pNode instanceof IJmlFieldSelectExpression).booleanValue()) 
                            visitFieldSelectExpression((IJmlFieldSelectExpression) pNode);
                          else {
                            if (new Boolean(pNode instanceof IJmlExpressionsList).booleanValue()) 
                              visitExpressionsList((IJmlExpressionsList) pNode);
                            else {
                              if (new Boolean(pNode instanceof IJmlEnumerationType).booleanValue()) 
                                visitEnumerationType((IJmlEnumerationType) pNode);
                              else {
                                if (new Boolean(pNode instanceof IJmlFloatLiteral).booleanValue()) 
                                  visitFloatLiteral((IJmlFloatLiteral) pNode);
                                else {
                                  if (new Boolean(pNode instanceof IJmlSuperKeyword).booleanValue()) 
                                    visitSuperKeyword((IJmlSuperKeyword) pNode);
                                  else {
                                    if (new Boolean(pNode instanceof IJmlClassKeyword).booleanValue()) 
                                      visitClassKeyword((IJmlClassKeyword) pNode);
                                    else {
                                      if (new Boolean(pNode instanceof IJmlMapEnumeration).booleanValue()) 
                                        visitMapEnumeration((IJmlMapEnumeration) pNode);
                                      else {
                                        if (new Boolean(pNode instanceof IJmlExceptionType).booleanValue()) 
                                          visitExceptionType((IJmlExceptionType) pNode);
                                        else {
                                          if (new Boolean(pNode instanceof IJmlNameId).booleanValue()) 
                                            visitNameId((IJmlNameId) pNode);
                                          else {
                                            if (new Boolean(pNode instanceof IJmlThrowExpression).booleanValue()) 
                                              visitThrowExpression((IJmlThrowExpression) pNode);
                                            else {
                                              if (new Boolean(pNode instanceof IJmlSetValueType).booleanValue()) 
                                                visitSetValueType((IJmlSetValueType) pNode);
                                              else {
                                                if (new Boolean(pNode instanceof IJmlPrimaryExpressions).booleanValue()) 
                                                  visitPrimaryExpressions((IJmlPrimaryExpressions) pNode);
                                                else {
                                                  if (new Boolean(pNode instanceof IJmlTrailers).booleanValue()) 
                                                    visitTrailers((IJmlTrailers) pNode);
                                                  else {
                                                    if (new Boolean(pNode instanceof IJmlOldName).booleanValue()) 
                                                      visitOldName((IJmlOldName) pNode);
                                                    else {
                                                      if (new Boolean(pNode instanceof IJmlForAllExpression).booleanValue()) 
                                                        visitForAllExpression((IJmlForAllExpression) pNode);
                                                      else {
                                                        if (new Boolean(pNode instanceof IJmlLiteralExpression).booleanValue()) 
                                                          visitLiteralExpression((IJmlLiteralExpression) pNode);
                                                        else {
                                                          if (new Boolean(pNode instanceof IJmlPostfixOperation).booleanValue()) 
                                                            visitPostfixOperation((IJmlPostfixOperation) pNode);
                                                          else {
                                                            if (new Boolean(pNode instanceof IJmlVariable).booleanValue()) 
                                                              visitVariable((IJmlVariable) pNode);
                                                            else {
                                                              if (new Boolean(pNode instanceof IJmlUnaryExpression).booleanValue()) 
                                                                visitUnaryExpression((IJmlUnaryExpression) pNode);
                                                              else {
                                                                if (new Boolean(pNode instanceof IJmlType).booleanValue()) 
                                                                  visitType((IJmlType) pNode);
                                                                else {
                                                                  if (new Boolean(pNode instanceof IJmlOldKeywordUnary).booleanValue()) 
                                                                    visitOldKeywordUnary((IJmlOldKeywordUnary) pNode);
                                                                  else {
                                                                    if (new Boolean(pNode instanceof IJmlSetEnumeration).booleanValue()) 
                                                                      visitSetEnumeration((IJmlSetEnumeration) pNode);
                                                                    else {
                                                                      if (new Boolean(pNode instanceof IJmlTupleType).booleanValue()) 
                                                                        visitTupleType((IJmlTupleType) pNode);
                                                                      else {
                                                                        if (new Boolean(pNode instanceof IJmlQuantifierDeclaration).booleanValue()) 
                                                                          visitQuantifierDeclaration((IJmlQuantifierDeclaration) pNode);
                                                                        else {
                                                                          if (new Boolean(pNode instanceof IJmlImport).booleanValue()) 
                                                                            visitImport((IJmlImport) pNode);
                                                                          else {
                                                                            if (new Boolean(pNode instanceof IJmlPostfixExpression).booleanValue()) 
                                                                              visitPostfixExpression((IJmlPostfixExpression) pNode);
                                                                            else {
                                                                              if (new Boolean(pNode instanceof IJmlDefinitionBlock).booleanValue()) 
                                                                                visitDefinitionBlock((IJmlDefinitionBlock) pNode);
                                                                              else {
                                                                                if (new Boolean(pNode instanceof IJmlNullLiteral).booleanValue()) 
                                                                                  visitNullLiteral((IJmlNullLiteral) pNode);
                                                                                else {
                                                                                  if (new Boolean(pNode instanceof IJmlSpecs).booleanValue()) 
                                                                                    visitSpecs((IJmlSpecs) pNode);
                                                                                  else {
                                                                                    if (new Boolean(pNode instanceof IJmlBehaviourSpec).booleanValue()) 
                                                                                      visitBehaviourSpec((IJmlBehaviourSpec) pNode);
                                                                                    else {
                                                                                      if (new Boolean(pNode instanceof IJmlName).booleanValue()) 
                                                                                        visitName((IJmlName) pNode);
                                                                                      else {
                                                                                        if (new Boolean(pNode instanceof IJmlOperationTrailer).booleanValue()) 
                                                                                          visitOperationTrailer((IJmlOperationTrailer) pNode);
                                                                                        else {
                                                                                          if (new Boolean(pNode instanceof IJmlFloatType).booleanValue()) 
                                                                                            visitFloatType((IJmlFloatType) pNode);
                                                                                          else {
                                                                                            if (new Boolean(pNode instanceof IJmlBooleanLiteral).booleanValue()) 
                                                                                              visitBooleanLiteral((IJmlBooleanLiteral) pNode);
                                                                                            else {
                                                                                              if (new Boolean(pNode instanceof IJmlPrimaryExpressionOption).booleanValue()) 
                                                                                                visitPrimaryExpressionOption((IJmlPrimaryExpressionOption) pNode);
                                                                                              else {
                                                                                                if (new Boolean(pNode instanceof IJmlOldKeyword).booleanValue()) 
                                                                                                  visitOldKeyword((IJmlOldKeyword) pNode);
                                                                                                else {
                                                                                                  if (new Boolean(pNode instanceof IJmlBody).booleanValue()) 
                                                                                                    visitBody((IJmlBody) pNode);
                                                                                                  else {
                                                                                                    if (new Boolean(pNode instanceof IJmlField).booleanValue()) 
                                                                                                      visitField((IJmlField) pNode);
                                                                                                    else {
                                                                                                      if (new Boolean(pNode instanceof IJmlInterfaceInheritanceClause).booleanValue()) 
                                                                                                        visitInterfaceInheritanceClause((IJmlInterfaceInheritanceClause) pNode);
                                                                                                      else {
                                                                                                        if (new Boolean(pNode instanceof IJmlUnaryOperator).booleanValue()) 
                                                                                                          visitUnaryOperator((IJmlUnaryOperator) pNode);
                                                                                                        else {
                                                                                                          if (new Boolean(pNode instanceof IJmlResultKeyword).booleanValue()) 
                                                                                                            visitResultKeyword((IJmlResultKeyword) pNode);
                                                                                                          else {
                                                                                                            if (new Boolean(pNode instanceof IJmlParameter).booleanValue()) 
                                                                                                              visitParameter((IJmlParameter) pNode);
                                                                                                            else {
                                                                                                              if (new Boolean(pNode instanceof IJmlSequenceEnumeration).booleanValue()) 
                                                                                                                visitSequenceEnumeration((IJmlSequenceEnumeration) pNode);
                                                                                                              else {
                                                                                                                if (new Boolean(pNode instanceof IJmlClassName).booleanValue()) 
                                                                                                                  visitClassName((IJmlClassName) pNode);
                                                                                                                else {
                                                                                                                  if (new Boolean(pNode instanceof IJmlOperationDefinition).booleanValue()) 
                                                                                                                    visitOperationDefinition((IJmlOperationDefinition) pNode);
                                                                                                                  else {
                                                                                                                    if (new Boolean(pNode instanceof IJmlWrappedJmlClass).booleanValue()) 
                                                                                                                      visitWrappedJmlClass((IJmlWrappedJmlClass) pNode);
                                                                                                                    else {
                                                                                                                      if (new Boolean(pNode instanceof IJmlThisExpression).booleanValue()) 
                                                                                                                        visitThisExpression((IJmlThisExpression) pNode);
                                                                                                                      else {
                                                                                                                        if (new Boolean(pNode instanceof IJmlModelImport).booleanValue()) 
                                                                                                                          visitModelImport((IJmlModelImport) pNode);
                                                                                                                        else {
                                                                                                                          if (new Boolean(pNode instanceof IJmlNotKeywordUnary).booleanValue()) 
                                                                                                                            visitNotKeywordUnary((IJmlNotKeywordUnary) pNode);
                                                                                                                          else {
                                                                                                                            if (new Boolean(pNode instanceof IJmlEnsuresClause).booleanValue()) 
                                                                                                                              visitEnsuresClause((IJmlEnsuresClause) pNode);
                                                                                                                            else {
                                                                                                                              if (new Boolean(pNode instanceof IJmlLiteral).booleanValue()) 
                                                                                                                                visitLiteral((IJmlLiteral) pNode);
                                                                                                                              else {
                                                                                                                                if (new Boolean(pNode instanceof IJmlUndefinedExpression).booleanValue()) 
                                                                                                                                  visitUndefinedExpression((IJmlUndefinedExpression) pNode);
                                                                                                                                else {
                                                                                                                                  if (new Boolean(pNode instanceof IJmlRequiresClause).booleanValue()) 
                                                                                                                                    visitRequiresClause((IJmlRequiresClause) pNode);
                                                                                                                                  else {
                                                                                                                                    if (new Boolean(pNode instanceof IJmlOtherDefinitions).booleanValue()) 
                                                                                                                                      visitOtherDefinitions((IJmlOtherDefinitions) pNode);
                                                                                                                                    else {
                                                                                                                                      if (new Boolean(pNode instanceof IJmlStarKeyword).booleanValue()) 
                                                                                                                                        visitStarKeyword((IJmlStarKeyword) pNode);
                                                                                                                                      else {
                                                                                                                                        if (new Boolean(pNode instanceof IJmlAssignableClause).booleanValue()) 
                                                                                                                                          visitAssignableClause((IJmlAssignableClause) pNode);
                                                                                                                                        else {
                                                                                                                                          if (new Boolean(pNode instanceof IJmlNumericalLiteral).booleanValue()) 
                                                                                                                                            visitNumericalLiteral((IJmlNumericalLiteral) pNode);
                                                                                                                                          else {
                                                                                                                                            if (new Boolean(pNode instanceof IJmlIfExpression).booleanValue()) 
                                                                                                                                              visitIfExpression((IJmlIfExpression) pNode);
                                                                                                                                            else {
                                                                                                                                              if (new Boolean(pNode instanceof IJmlInvariantDefinition).booleanValue()) 
                                                                                                                                                visitInvariantDefinition((IJmlInvariantDefinition) pNode);
                                                                                                                                              else {
                                                                                                                                                if (new Boolean(pNode instanceof IJmlBoundModifiers).booleanValue()) 
                                                                                                                                                  visitBoundModifiers((IJmlBoundModifiers) pNode);
                                                                                                                                                else {
                                                                                                                                                  if (new Boolean(pNode instanceof IJmlValueDefinition).booleanValue()) 
                                                                                                                                                    visitValueDefinition((IJmlValueDefinition) pNode);
                                                                                                                                                  else {
                                                                                                                                                    if (new Boolean(pNode instanceof IJmlClassKind).booleanValue()) 
                                                                                                                                                      visitClassKind((IJmlClassKind) pNode);
                                                                                                                                                    else {
                                                                                                                                                      if (new Boolean(pNode instanceof IJmlExceptionalSpec).booleanValue()) 
                                                                                                                                                        visitExceptionalSpec((IJmlExceptionalSpec) pNode);
                                                                                                                                                      else {
                                                                                                                                                        if (new Boolean(pNode instanceof IJmlApplyExpression).booleanValue()) 
                                                                                                                                                          visitApplyExpression((IJmlApplyExpression) pNode);
                                                                                                                                                        else {
                                                                                                                                                          if (new Boolean(pNode instanceof IJmlNatType).booleanValue()) 
                                                                                                                                                            visitNatType((IJmlNatType) pNode);
                                                                                                                                                          else {
                                                                                                                                                            if (new Boolean(pNode instanceof IJmlEnumLiteral).booleanValue()) 
                                                                                                                                                              visitEnumLiteral((IJmlEnumLiteral) pNode);
                                                                                                                                                            else {
                                                                                                                                                              if (new Boolean(pNode instanceof IJmlCharType).booleanValue()) 
                                                                                                                                                                visitCharType((IJmlCharType) pNode);
                                                                                                                                                              else {
                                                                                                                                                                if (new Boolean(pNode instanceof IJmlCharacterLiteral).booleanValue()) 
                                                                                                                                                                  visitCharacterLiteral((IJmlCharacterLiteral) pNode);
                                                                                                                                                                else {
                                                                                                                                                                  if (new Boolean(pNode instanceof IJmlValueDefinitions).booleanValue()) 
                                                                                                                                                                    visitValueDefinitions((IJmlValueDefinitions) pNode);
                                                                                                                                                                  else {
                                                                                                                                                                    if (new Boolean(pNode instanceof IJmlBracketedExpression).booleanValue()) 
                                                                                                                                                                      visitBracketedExpression((IJmlBracketedExpression) pNode);
                                                                                                                                                                    else {
                                                                                                                                                                      if (new Boolean(pNode instanceof IJmlNotAssignedKeyword).booleanValue()) 
                                                                                                                                                                        visitNotAssignedKeyword((IJmlNotAssignedKeyword) pNode);
                                                                                                                                                                      else {
                                                                                                                                                                        if (new Boolean(pNode instanceof IJmlStringLiteral).booleanValue()) 
                                                                                                                                                                          visitStringLiteral((IJmlStringLiteral) pNode);
                                                                                                                                                                        else {
                                                                                                                                                                          if (new Boolean(pNode instanceof IJmlAccessDefinition).booleanValue()) 
                                                                                                                                                                            visitAccessDefinition((IJmlAccessDefinition) pNode);
                                                                                                                                                                          else {
                                                                                                                                                                            if (new Boolean(pNode instanceof IJmlPrimaryExpression).booleanValue()) 
                                                                                                                                                                              visitPrimaryExpression((IJmlPrimaryExpression) pNode);
                                                                                                                                                                            else {
                                                                                                                                                                              if (new Boolean(pNode instanceof IJmlNewExpression).booleanValue()) 
                                                                                                                                                                                visitNewExpression((IJmlNewExpression) pNode);
                                                                                                                                                                              else {
                                                                                                                                                                                if (new Boolean(pNode instanceof IJmlInstanceOfExpression).booleanValue()) 
                                                                                                                                                                                  visitInstanceOfExpression((IJmlInstanceOfExpression) pNode);
                                                                                                                                                                                else {
                                                                                                                                                                                  if (new Boolean(pNode instanceof IJmlScope).booleanValue()) 
                                                                                                                                                                                    visitScope((IJmlScope) pNode);
                                                                                                                                                                                  else {
                                                                                                                                                                                    if (new Boolean(pNode instanceof IJmlInvariantDefinitions).booleanValue()) 
                                                                                                                                                                                      visitInvariantDefinitions((IJmlInvariantDefinitions) pNode);
                                                                                                                                                                                    else {
                                                                                                                                                                                      if (new Boolean(pNode instanceof IJmlPrimarySuffix).booleanValue()) 
                                                                                                                                                                                        visitPrimarySuffix((IJmlPrimarySuffix) pNode);
                                                                                                                                                                                      else {
                                                                                                                                                                                        if (new Boolean(pNode instanceof IJmlSuperKeywordSuffix).booleanValue()) 
                                                                                                                                                                                          visitSuperKeywordSuffix((IJmlSuperKeywordSuffix) pNode);
                                                                                                                                                                                        else {
                                                                                                                                                                                          if (new Boolean(pNode instanceof IJmlObjectType).booleanValue()) 
                                                                                                                                                                                            visitObjectType((IJmlObjectType) pNode);
                                                                                                                                                                                          else {
                                                                                                                                                                                            if (new Boolean(pNode instanceof IJmlVoidType).booleanValue()) 
                                                                                                                                                                                              visitVoidType((IJmlVoidType) pNode);
                                                                                                                                                                                            else {
                                                                                                                                                                                              if (new Boolean(pNode instanceof IJmlExistsExpression).booleanValue()) 
                                                                                                                                                                                                visitExistsExpression((IJmlExistsExpression) pNode);
                                                                                                                                                                                              else {
                                                                                                                                                                                                if (new Boolean(pNode instanceof IJmlClassInheritanceClause).booleanValue()) 
                                                                                                                                                                                                  visitClassInheritanceClause((IJmlClassInheritanceClause) pNode);
                                                                                                                                                                                                else {
                                                                                                                                                                                                  if (new Boolean(pNode instanceof IJmlNullKeyword).booleanValue()) 
                                                                                                                                                                                                    visitNullKeyword((IJmlNullKeyword) pNode);
                                                                                                                                                                                                  else {
                                                                                                                                                                                                    if (new Boolean(pNode instanceof IJmlMethodSpecifications).booleanValue()) 
                                                                                                                                                                                                      visitMethodSpecifications((IJmlMethodSpecifications) pNode);
                                                                                                                                                                                                    else {
                                                                                                                                                                                                      if (new Boolean(pNode instanceof IJmlException).booleanValue()) 
                                                                                                                                                                                                        visitException((IJmlException) pNode);
                                                                                                                                                                                                      else {
                                                                                                                                                                                                        if (new Boolean(pNode instanceof IJmlExpression).booleanValue()) 
                                                                                                                                                                                                          visitExpression((IJmlExpression) pNode);
                                                                                                                                                                                                        else {
                                                                                                                                                                                                          if (new Boolean(pNode instanceof IJmlBinaryOperator).booleanValue()) 
                                                                                                                                                                                                            visitBinaryOperator((IJmlBinaryOperator) pNode);
                                                                                                                                                                                                          else {
                                                                                                                                                                                                            if (new Boolean(pNode instanceof IJmlNormalSpec).booleanValue()) 
                                                                                                                                                                                                              visitNormalSpec((IJmlNormalSpec) pNode);
                                                                                                                                                                                                            else {
                                                                                                                                                                                                              if (new Boolean(pNode instanceof IJmlPrimaryExpressionLiteral).booleanValue()) 
                                                                                                                                                                                                                visitPrimaryExpressionLiteral((IJmlPrimaryExpressionLiteral) pNode);
                                                                                                                                                                                                              else {
                                                                                                                                                                                                                if (new Boolean(pNode instanceof IJmlIntegerType).booleanValue()) 
                                                                                                                                                                                                                  visitIntegerType((IJmlIntegerType) pNode);
                                                                                                                                                                                                                else {
                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IJmlBlockExpression).booleanValue()) 
                                                                                                                                                                                                                    visitBlockExpression((IJmlBlockExpression) pNode);
                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IJmlSeqValueType).booleanValue()) 
                                                                                                                                                                                                                      visitSeqValueType((IJmlSeqValueType) pNode);
                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IJmlSignalsClause).booleanValue()) 
                                                                                                                                                                                                                        visitSignalsClause((IJmlSignalsClause) pNode);
                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IJmlBoolType).booleanValue()) 
                                                                                                                                                                                                                          visitBoolType((IJmlBoolType) pNode);
                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IJmlThisKeywordSuffix).booleanValue()) 
                                                                                                                                                                                                                            visitThisKeywordSuffix((IJmlThisKeywordSuffix) pNode);
                                                                                                                                                                                                                          else {

                                                                                                                                                                                                                            UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitNode


// ***** VDMTOOLS START Name=visitType KEEP=NO
  public void visitType (final IJmlType pNode) throws CGException {
    if (new Boolean(pNode instanceof IJmlNatType).booleanValue()) 
      visitNatType((IJmlNatType) pNode);
    else 
      if (new Boolean(pNode instanceof IJmlFloatType).booleanValue()) 
        visitFloatType((IJmlFloatType) pNode);
      else {
        if (new Boolean(pNode instanceof IJmlObjectType).booleanValue()) 
          visitObjectType((IJmlObjectType) pNode);
        else {
          if (new Boolean(pNode instanceof IJmlVoidType).booleanValue()) 
            visitVoidType((IJmlVoidType) pNode);
          else {
            if (new Boolean(pNode instanceof IJmlTupleType).booleanValue()) 
              visitTupleType((IJmlTupleType) pNode);
            else {
              if (new Boolean(pNode instanceof IJmlMapValueToValueType).booleanValue()) 
                visitMapValueToValueType((IJmlMapValueToValueType) pNode);
              else {
                if (new Boolean(pNode instanceof IJmlSetValueType).booleanValue()) 
                  visitSetValueType((IJmlSetValueType) pNode);
                else {
                  if (new Boolean(pNode instanceof IJmlCharType).booleanValue()) 
                    visitCharType((IJmlCharType) pNode);
                  else {
                    if (new Boolean(pNode instanceof IJmlClassType).booleanValue()) 
                      visitClassType((IJmlClassType) pNode);
                    else {
                      if (new Boolean(pNode instanceof IJmlEnumerationType).booleanValue()) 
                        visitEnumerationType((IJmlEnumerationType) pNode);
                      else {
                        if (new Boolean(pNode instanceof IJmlIntegerType).booleanValue()) 
                          visitIntegerType((IJmlIntegerType) pNode);
                        else {
                          if (new Boolean(pNode instanceof IJmlSeqValueType).booleanValue()) 
                            visitSeqValueType((IJmlSeqValueType) pNode);
                          else {
                            if (new Boolean(pNode instanceof IJmlClassName).booleanValue()) 
                              visitClassName((IJmlClassName) pNode);
                            else {
                              if (new Boolean(pNode instanceof IJmlBoolType).booleanValue()) 
                                visitBoolType((IJmlBoolType) pNode);
                              else {

                                UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                                return;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitType


// ***** VDMTOOLS START Name=visitPrimaryExpressionOption KEEP=NO
  public void visitPrimaryExpressionOption (final IJmlPrimaryExpressionOption pNode) throws CGException {
    if (new Boolean(pNode instanceof IJmlNotAssignedKeyword).booleanValue()) 
      visitNotAssignedKeyword((IJmlNotAssignedKeyword) pNode);
    else 
      if (new Boolean(pNode instanceof IJmlNameId).booleanValue()) 
        visitNameId((IJmlNameId) pNode);
      else {
        if (new Boolean(pNode instanceof IJmlOldKeyword).booleanValue()) 
          visitOldKeyword((IJmlOldKeyword) pNode);
        else {
          if (new Boolean(pNode instanceof IJmlSuperKeyword).booleanValue()) 
            visitSuperKeyword((IJmlSuperKeyword) pNode);
          else {
            if (new Boolean(pNode instanceof IJmlThisKeyword).booleanValue()) 
              visitThisKeyword((IJmlThisKeyword) pNode);
            else {
              if (new Boolean(pNode instanceof IJmlResultKeyword).booleanValue()) 
                visitResultKeyword((IJmlResultKeyword) pNode);
              else {
                if (new Boolean(pNode instanceof IJmlNullKeyword).booleanValue()) 
                  visitNullKeyword((IJmlNullKeyword) pNode);
                else {

                  UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                  return;
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitPrimaryExpressionOption


// ***** VDMTOOLS START Name=visitTrailers KEEP=NO
  public void visitTrailers (final IJmlTrailers pNode) throws CGException {
    if (new Boolean(pNode instanceof IJmlEnsuresClause).booleanValue()) 
      visitEnsuresClause((IJmlEnsuresClause) pNode);
    else 
      if (new Boolean(pNode instanceof IJmlSignalsClause).booleanValue()) 
        visitSignalsClause((IJmlSignalsClause) pNode);
      else {
        if (new Boolean(pNode instanceof IJmlAssignableClause).booleanValue()) 
          visitAssignableClause((IJmlAssignableClause) pNode);
        else {
          if (new Boolean(pNode instanceof IJmlRequiresClause).booleanValue()) 
            visitRequiresClause((IJmlRequiresClause) pNode);
          else {

            UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
            return;
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitTrailers


// ***** VDMTOOLS START Name=visitDefinitionBlock KEEP=NO
  public void visitDefinitionBlock (final IJmlDefinitionBlock pNode) throws CGException {
    if (new Boolean(pNode instanceof IJmlValueDefinitions).booleanValue()) 
      visitValueDefinitions((IJmlValueDefinitions) pNode);
    else 
      if (new Boolean(pNode instanceof IJmlInstanceVariableDefinitions).booleanValue()) 
        visitInstanceVariableDefinitions((IJmlInstanceVariableDefinitions) pNode);
      else {
        if (new Boolean(pNode instanceof IJmlOtherDefinitions).booleanValue()) 
          visitOtherDefinitions((IJmlOtherDefinitions) pNode);
        else {
          if (new Boolean(pNode instanceof IJmlOperationDefinitions).booleanValue()) 
            visitOperationDefinitions((IJmlOperationDefinitions) pNode);
          else {
            if (new Boolean(pNode instanceof IJmlInvariantDefinitions).booleanValue()) 
              visitInvariantDefinitions((IJmlInvariantDefinitions) pNode);
            else {

              UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
              return;
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitDefinitionBlock


// ***** VDMTOOLS START Name=visitPostfixOperation KEEP=NO
  public void visitPostfixOperation (final IJmlPostfixOperation var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitPostfixOperation


// ***** VDMTOOLS START Name=visitBinaryOperator KEEP=NO
  public void visitBinaryOperator (final IJmlBinaryOperator var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBinaryOperator


// ***** VDMTOOLS START Name=visitExpression KEEP=NO
  public void visitExpression (final IJmlExpression pNode) throws CGException {
    if (new Boolean(pNode instanceof IJmlThisExpression).booleanValue()) 
      visitThisExpression((IJmlThisExpression) pNode);
    else 
      if (new Boolean(pNode instanceof IJmlApplyExpression).booleanValue()) 
        visitApplyExpression((IJmlApplyExpression) pNode);
      else {
        if (new Boolean(pNode instanceof IJmlMapEnumeration).booleanValue()) 
          visitMapEnumeration((IJmlMapEnumeration) pNode);
        else {
          if (new Boolean(pNode instanceof IJmlExistsExpression).booleanValue()) 
            visitExistsExpression((IJmlExistsExpression) pNode);
          else {
            if (new Boolean(pNode instanceof IJmlSetEnumeration).booleanValue()) 
              visitSetEnumeration((IJmlSetEnumeration) pNode);
            else {
              if (new Boolean(pNode instanceof IJmlBinaryExpression).booleanValue()) 
                visitBinaryExpression((IJmlBinaryExpression) pNode);
              else {
                if (new Boolean(pNode instanceof IJmlPostfixExpression).booleanValue()) 
                  visitPostfixExpression((IJmlPostfixExpression) pNode);
                else {
                  if (new Boolean(pNode instanceof IJmlOldName).booleanValue()) 
                    visitOldName((IJmlOldName) pNode);
                  else {
                    if (new Boolean(pNode instanceof IJmlForAllExpression).booleanValue()) 
                      visitForAllExpression((IJmlForAllExpression) pNode);
                    else {
                      if (new Boolean(pNode instanceof IJmlLiteralExpression).booleanValue()) 
                        visitLiteralExpression((IJmlLiteralExpression) pNode);
                      else {
                        if (new Boolean(pNode instanceof IJmlBracketedExpression).booleanValue()) 
                          visitBracketedExpression((IJmlBracketedExpression) pNode);
                        else {
                          if (new Boolean(pNode instanceof IJmlFieldSelectExpression).booleanValue()) 
                            visitFieldSelectExpression((IJmlFieldSelectExpression) pNode);
                          else {
                            if (new Boolean(pNode instanceof IJmlUndefinedExpression).booleanValue()) 
                              visitUndefinedExpression((IJmlUndefinedExpression) pNode);
                            else {
                              if (new Boolean(pNode instanceof IJmlIfExpression).booleanValue()) 
                                visitIfExpression((IJmlIfExpression) pNode);
                              else {
                                if (new Boolean(pNode instanceof IJmlNewExpression).booleanValue()) 
                                  visitNewExpression((IJmlNewExpression) pNode);
                                else {
                                  if (new Boolean(pNode instanceof IJmlBlockExpression).booleanValue()) 
                                    visitBlockExpression((IJmlBlockExpression) pNode);
                                  else {
                                    if (new Boolean(pNode instanceof IJmlInstanceOfExpression).booleanValue()) 
                                      visitInstanceOfExpression((IJmlInstanceOfExpression) pNode);
                                    else {
                                      if (new Boolean(pNode instanceof IJmlSequenceEnumeration).booleanValue()) 
                                        visitSequenceEnumeration((IJmlSequenceEnumeration) pNode);
                                      else {
                                        if (new Boolean(pNode instanceof IJmlName).booleanValue()) 
                                          visitName((IJmlName) pNode);
                                        else {
                                          if (new Boolean(pNode instanceof IJmlUnaryExpression).booleanValue()) 
                                            visitUnaryExpression((IJmlUnaryExpression) pNode);
                                          else {

                                            UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                                            return;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitExpression


// ***** VDMTOOLS START Name=visitLiteral KEEP=NO
  public void visitLiteral (final IJmlLiteral pNode) throws CGException {
    if (new Boolean(pNode instanceof IJmlBooleanLiteral).booleanValue()) 
      visitBooleanLiteral((IJmlBooleanLiteral) pNode);
    else 
      if (new Boolean(pNode instanceof IJmlStringLiteral).booleanValue()) 
        visitStringLiteral((IJmlStringLiteral) pNode);
      else {
        if (new Boolean(pNode instanceof IJmlEnumLiteral).booleanValue()) 
          visitEnumLiteral((IJmlEnumLiteral) pNode);
        else {
          if (new Boolean(pNode instanceof IJmlFloatLiteral).booleanValue()) 
            visitFloatLiteral((IJmlFloatLiteral) pNode);
          else {
            if (new Boolean(pNode instanceof IJmlNullLiteral).booleanValue()) 
              visitNullLiteral((IJmlNullLiteral) pNode);
            else {
              if (new Boolean(pNode instanceof IJmlCharacterLiteral).booleanValue()) 
                visitCharacterLiteral((IJmlCharacterLiteral) pNode);
              else {
                if (new Boolean(pNode instanceof IJmlNumericalLiteral).booleanValue()) 
                  visitNumericalLiteral((IJmlNumericalLiteral) pNode);
                else {

                  UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                  return;
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitLiteral


// ***** VDMTOOLS START Name=visitPrimaryExpression KEEP=NO
  public void visitPrimaryExpression (final IJmlPrimaryExpression pNode) throws CGException {
    if (new Boolean(pNode instanceof IJmlPrimaryExpressionKeyword).booleanValue()) 
      visitPrimaryExpressionKeyword((IJmlPrimaryExpressionKeyword) pNode);
    else 
      if (new Boolean(pNode instanceof IJmlPrimaryExpressionLiteral).booleanValue()) 
        visitPrimaryExpressionLiteral((IJmlPrimaryExpressionLiteral) pNode);
      else {

        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
        return;
      }
  }
// ***** VDMTOOLS END Name=visitPrimaryExpression


// ***** VDMTOOLS START Name=visitScope KEEP=NO
  public void visitScope (final IJmlScope var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitScope


// ***** VDMTOOLS START Name=visitUnaryOperator KEEP=NO
  public void visitUnaryOperator (final IJmlUnaryOperator var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitUnaryOperator


// ***** VDMTOOLS START Name=visitBoundModifiers KEEP=NO
  public void visitBoundModifiers (final IJmlBoundModifiers var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBoundModifiers


// ***** VDMTOOLS START Name=visitOperationTrailer KEEP=NO
  public void visitOperationTrailer (final IJmlOperationTrailer pNode) throws CGException {
    if (new Boolean(pNode instanceof IJmlExceptionalSpec).booleanValue()) 
      visitExceptionalSpec((IJmlExceptionalSpec) pNode);
    else 
      if (new Boolean(pNode instanceof IJmlNormalSpec).booleanValue()) 
        visitNormalSpec((IJmlNormalSpec) pNode);
      else {
        if (new Boolean(pNode instanceof IJmlBehaviourSpec).booleanValue()) 
          visitBehaviourSpec((IJmlBehaviourSpec) pNode);
        else {

          UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
          return;
        }
      }
  }
// ***** VDMTOOLS END Name=visitOperationTrailer


// ***** VDMTOOLS START Name=visitClassKind KEEP=NO
  public void visitClassKind (final IJmlClassKind var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitClassKind


// ***** VDMTOOLS START Name=visitPrimarySuffix KEEP=NO
  public void visitPrimarySuffix (final IJmlPrimarySuffix pNode) throws CGException {
    if (new Boolean(pNode instanceof IJmlSuperKeywordSuffix).booleanValue()) 
      visitSuperKeywordSuffix((IJmlSuperKeywordSuffix) pNode);
    else 
      if (new Boolean(pNode instanceof IJmlExpressionsList).booleanValue()) 
        visitExpressionsList((IJmlExpressionsList) pNode);
      else {
        if (new Boolean(pNode instanceof IJmlClassKeyword).booleanValue()) 
          visitClassKeyword((IJmlClassKeyword) pNode);
        else {
          if (new Boolean(pNode instanceof IJmlThisKeywordSuffix).booleanValue()) 
            visitThisKeywordSuffix((IJmlThisKeywordSuffix) pNode);
          else {

            UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
            return;
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitPrimarySuffix

}
;
