//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Mon 07-Jul-2008 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 06-Jun-2008 09:02:11)
//
// Supported compilers:
// jdk1.4
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.jml.ast.imp;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import org.overturetool.jml.ast.itf.*;
// ***** VDMTOOLS END Name=imports



public class JmlLiteralExpression extends JmlExpression implements IJmlLiteralExpression {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=ivLit KEEP=NO
  private IJmlLiteral ivLit = null;
// ***** VDMTOOLS END Name=ivLit


// ***** VDMTOOLS START Name=JmlLiteralExpression KEEP=NO
  public JmlLiteralExpression () throws CGException {
    try {
      ivLit = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=JmlLiteralExpression


// ***** VDMTOOLS START Name=identity KEEP=NO
  public String identity () throws CGException {
    return new String("LiteralExpression");
  }
// ***** VDMTOOLS END Name=identity


// ***** VDMTOOLS START Name=accept KEEP=NO
  public void accept (final IJmlVisitor pVisitor) throws CGException {
    pVisitor.visitLiteralExpression((IJmlLiteralExpression) this);
  }
// ***** VDMTOOLS END Name=accept


// ***** VDMTOOLS START Name=JmlLiteralExpression KEEP=NO
  public JmlLiteralExpression (final IJmlLiteral p1) throws CGException {

    try {
      ivLit = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
    setLit((IJmlLiteral) p1);
  }
// ***** VDMTOOLS END Name=JmlLiteralExpression


// ***** VDMTOOLS START Name=JmlLiteralExpression KEEP=NO
  public JmlLiteralExpression (final IJmlLiteral p1, final Long line, final Long column) throws CGException {

    try {
      ivLit = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
    {

      setLit((IJmlLiteral) p1);
      setPosition(line, column);
    }
  }
// ***** VDMTOOLS END Name=JmlLiteralExpression


// ***** VDMTOOLS START Name=init KEEP=NO
  public void init (final HashMap data) throws CGException {

    String fname = new String("lit");
    Boolean cond_4 = null;
    cond_4 = new Boolean(data.containsKey(fname));
    if (cond_4.booleanValue()) 
      setLit((IJmlLiteral) data.get(fname));
  }
// ***** VDMTOOLS END Name=init


// ***** VDMTOOLS START Name=getLit KEEP=NO
  public IJmlLiteral getLit () throws CGException {
    return (IJmlLiteral) ivLit;
  }
// ***** VDMTOOLS END Name=getLit


// ***** VDMTOOLS START Name=setLit KEEP=NO
  public void setLit (final IJmlLiteral parg) throws CGException {
    ivLit = (IJmlLiteral) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setLit

}
;
