//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Mon 07-Jul-2008 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 06-Jun-2008 09:02:11)
//
// Supported compilers:
// jdk1.4
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.jml.ast.imp;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import org.overturetool.jml.ast.itf.*;
// ***** VDMTOOLS END Name=imports



public class JmlIfExpression extends JmlExpression implements IJmlIfExpression {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=ivIfExpression KEEP=NO
  private IJmlExpression ivIfExpression = null;
// ***** VDMTOOLS END Name=ivIfExpression

// ***** VDMTOOLS START Name=ivThenExpression KEEP=NO
  private IJmlExpression ivThenExpression = null;
// ***** VDMTOOLS END Name=ivThenExpression

// ***** VDMTOOLS START Name=ivElseExpression KEEP=NO
  private IJmlExpression ivElseExpression = null;
// ***** VDMTOOLS END Name=ivElseExpression


// ***** VDMTOOLS START Name=JmlIfExpression KEEP=NO
  public JmlIfExpression () throws CGException {
    try {

      ivIfExpression = null;
      ivThenExpression = null;
      ivElseExpression = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=JmlIfExpression


// ***** VDMTOOLS START Name=identity KEEP=NO
  public String identity () throws CGException {
    return new String("IfExpression");
  }
// ***** VDMTOOLS END Name=identity


// ***** VDMTOOLS START Name=accept KEEP=NO
  public void accept (final IJmlVisitor pVisitor) throws CGException {
    pVisitor.visitIfExpression((IJmlIfExpression) this);
  }
// ***** VDMTOOLS END Name=accept


// ***** VDMTOOLS START Name=JmlIfExpression KEEP=NO
  public JmlIfExpression (final IJmlExpression p1, final IJmlExpression p2, final IJmlExpression p3) throws CGException {

    try {

      ivIfExpression = null;
      ivThenExpression = null;
      ivElseExpression = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
    {

      setIfExpression((IJmlExpression) p1);
      setThenExpression((IJmlExpression) p2);
      setElseExpression((IJmlExpression) p3);
    }
  }
// ***** VDMTOOLS END Name=JmlIfExpression


// ***** VDMTOOLS START Name=JmlIfExpression KEEP=NO
  public JmlIfExpression (final IJmlExpression p1, final IJmlExpression p2, final IJmlExpression p3, final Long line, final Long column) throws CGException {

    try {

      ivIfExpression = null;
      ivThenExpression = null;
      ivElseExpression = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
    {

      setIfExpression((IJmlExpression) p1);
      setThenExpression((IJmlExpression) p2);
      setElseExpression((IJmlExpression) p3);
      setPosition(line, column);
    }
  }
// ***** VDMTOOLS END Name=JmlIfExpression


// ***** VDMTOOLS START Name=init KEEP=NO
  public void init (final HashMap data) throws CGException {

    {

      String fname = new String("if_expression");
      Boolean cond_4 = null;
      cond_4 = new Boolean(data.containsKey(fname));
      if (cond_4.booleanValue()) 
        setIfExpression((IJmlExpression) data.get(fname));
    }
    {

      String fname = new String("then_expression");
      Boolean cond_13 = null;
      cond_13 = new Boolean(data.containsKey(fname));
      if (cond_13.booleanValue()) 
        setThenExpression((IJmlExpression) data.get(fname));
    }
    {

      String fname = new String("else_expression");
      Boolean cond_22 = null;
      cond_22 = new Boolean(data.containsKey(fname));
      if (cond_22.booleanValue()) 
        setElseExpression((IJmlExpression) data.get(fname));
    }
  }
// ***** VDMTOOLS END Name=init


// ***** VDMTOOLS START Name=getIfExpression KEEP=NO
  public IJmlExpression getIfExpression () throws CGException {
    return (IJmlExpression) ivIfExpression;
  }
// ***** VDMTOOLS END Name=getIfExpression


// ***** VDMTOOLS START Name=setIfExpression KEEP=NO
  public void setIfExpression (final IJmlExpression parg) throws CGException {
    ivIfExpression = (IJmlExpression) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setIfExpression


// ***** VDMTOOLS START Name=getThenExpression KEEP=NO
  public IJmlExpression getThenExpression () throws CGException {
    return (IJmlExpression) ivThenExpression;
  }
// ***** VDMTOOLS END Name=getThenExpression


// ***** VDMTOOLS START Name=setThenExpression KEEP=NO
  public void setThenExpression (final IJmlExpression parg) throws CGException {
    ivThenExpression = (IJmlExpression) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setThenExpression


// ***** VDMTOOLS START Name=getElseExpression KEEP=NO
  public IJmlExpression getElseExpression () throws CGException {
    return (IJmlExpression) ivElseExpression;
  }
// ***** VDMTOOLS END Name=getElseExpression


// ***** VDMTOOLS START Name=setElseExpression KEEP=NO
  public void setElseExpression (final IJmlExpression parg) throws CGException {
    ivElseExpression = (IJmlExpression) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setElseExpression

}
;
