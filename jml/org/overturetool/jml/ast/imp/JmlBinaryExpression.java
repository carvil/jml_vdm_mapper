//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Mon 07-Jul-2008 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 06-Jun-2008 09:02:11)
//
// Supported compilers:
// jdk1.4
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.jml.ast.imp;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import org.overturetool.jml.ast.itf.*;
// ***** VDMTOOLS END Name=imports



public class JmlBinaryExpression extends JmlExpression implements IJmlBinaryExpression {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=ivLhsExpression KEEP=NO
  private IJmlExpression ivLhsExpression = null;
// ***** VDMTOOLS END Name=ivLhsExpression

// ***** VDMTOOLS START Name=ivOperator KEEP=NO
  private IJmlBinaryOperator ivOperator = null;
// ***** VDMTOOLS END Name=ivOperator

// ***** VDMTOOLS START Name=ivRhsExpression KEEP=NO
  private IJmlExpression ivRhsExpression = null;
// ***** VDMTOOLS END Name=ivRhsExpression


// ***** VDMTOOLS START Name=JmlBinaryExpression KEEP=NO
  public JmlBinaryExpression () throws CGException {
    try {

      ivLhsExpression = null;
      ivOperator = null;
      ivRhsExpression = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=JmlBinaryExpression


// ***** VDMTOOLS START Name=identity KEEP=NO
  public String identity () throws CGException {
    return new String("BinaryExpression");
  }
// ***** VDMTOOLS END Name=identity


// ***** VDMTOOLS START Name=accept KEEP=NO
  public void accept (final IJmlVisitor pVisitor) throws CGException {
    pVisitor.visitBinaryExpression((IJmlBinaryExpression) this);
  }
// ***** VDMTOOLS END Name=accept


// ***** VDMTOOLS START Name=JmlBinaryExpression KEEP=NO
  public JmlBinaryExpression (final IJmlExpression p1, final IJmlBinaryOperator p2, final IJmlExpression p3) throws CGException {

    try {

      ivLhsExpression = null;
      ivOperator = null;
      ivRhsExpression = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
    {

      setLhsExpression((IJmlExpression) p1);
      setOperator((IJmlBinaryOperator) p2);
      setRhsExpression((IJmlExpression) p3);
    }
  }
// ***** VDMTOOLS END Name=JmlBinaryExpression


// ***** VDMTOOLS START Name=JmlBinaryExpression KEEP=NO
  public JmlBinaryExpression (final IJmlExpression p1, final IJmlBinaryOperator p2, final IJmlExpression p3, final Long line, final Long column) throws CGException {

    try {

      ivLhsExpression = null;
      ivOperator = null;
      ivRhsExpression = null;
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
    {

      setLhsExpression((IJmlExpression) p1);
      setOperator((IJmlBinaryOperator) p2);
      setRhsExpression((IJmlExpression) p3);
      setPosition(line, column);
    }
  }
// ***** VDMTOOLS END Name=JmlBinaryExpression


// ***** VDMTOOLS START Name=init KEEP=NO
  public void init (final HashMap data) throws CGException {

    {

      String fname = new String("lhs_expression");
      Boolean cond_4 = null;
      cond_4 = new Boolean(data.containsKey(fname));
      if (cond_4.booleanValue()) 
        setLhsExpression((IJmlExpression) data.get(fname));
    }
    {

      String fname = new String("operator");
      Boolean cond_13 = null;
      cond_13 = new Boolean(data.containsKey(fname));
      if (cond_13.booleanValue()) 
        setOperator((IJmlBinaryOperator) data.get(fname));
    }
    {

      String fname = new String("rhs_expression");
      Boolean cond_22 = null;
      cond_22 = new Boolean(data.containsKey(fname));
      if (cond_22.booleanValue()) 
        setRhsExpression((IJmlExpression) data.get(fname));
    }
  }
// ***** VDMTOOLS END Name=init


// ***** VDMTOOLS START Name=getLhsExpression KEEP=NO
  public IJmlExpression getLhsExpression () throws CGException {
    return (IJmlExpression) ivLhsExpression;
  }
// ***** VDMTOOLS END Name=getLhsExpression


// ***** VDMTOOLS START Name=setLhsExpression KEEP=NO
  public void setLhsExpression (final IJmlExpression parg) throws CGException {
    ivLhsExpression = (IJmlExpression) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setLhsExpression


// ***** VDMTOOLS START Name=getOperator KEEP=NO
  public IJmlBinaryOperator getOperator () throws CGException {
    return (IJmlBinaryOperator) ivOperator;
  }
// ***** VDMTOOLS END Name=getOperator


// ***** VDMTOOLS START Name=setOperator KEEP=NO
  public void setOperator (final IJmlBinaryOperator parg) throws CGException {
    ivOperator = (IJmlBinaryOperator) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setOperator


// ***** VDMTOOLS START Name=getRhsExpression KEEP=NO
  public IJmlExpression getRhsExpression () throws CGException {
    return (IJmlExpression) ivRhsExpression;
  }
// ***** VDMTOOLS END Name=getRhsExpression


// ***** VDMTOOLS START Name=setRhsExpression KEEP=NO
  public void setRhsExpression (final IJmlExpression parg) throws CGException {
    ivRhsExpression = (IJmlExpression) UTIL.clone(parg);
  }
// ***** VDMTOOLS END Name=setRhsExpression

}
;
