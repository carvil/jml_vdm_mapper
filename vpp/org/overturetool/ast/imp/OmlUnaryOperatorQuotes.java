//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Mon 07-Jul-2008 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 06-Jun-2008 09:02:11)
//
// Supported compilers:
// jdk1.4
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.ast.imp;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import org.overturetool.ast.itf.*;
// ***** VDMTOOLS END Name=imports



public class OmlUnaryOperatorQuotes implements IOmlUnaryOperatorQuotes {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp




















// ***** VDMTOOLS START Name=qmap KEEP=NO
  private static HashMap qmap = new HashMap();
// ***** VDMTOOLS END Name=qmap


// ***** VDMTOOLS START Name=static KEEP=NO
  static {
    try {

      OmlUnaryOperatorQuotes.qmap = new HashMap();
      OmlUnaryOperatorQuotes.qmap.put(IQABS, new String("<ABS>"));
      OmlUnaryOperatorQuotes.qmap.put(IQINVERSE, new String("<INVERSE>"));
      OmlUnaryOperatorQuotes.qmap.put(IQHD, new String("<HD>"));
      OmlUnaryOperatorQuotes.qmap.put(IQELEMS, new String("<ELEMS>"));
      OmlUnaryOperatorQuotes.qmap.put(IQINDS, new String("<INDS>"));
      OmlUnaryOperatorQuotes.qmap.put(IQTL, new String("<TL>"));
      OmlUnaryOperatorQuotes.qmap.put(IQCARD, new String("<CARD>"));
      OmlUnaryOperatorQuotes.qmap.put(IQDUNION, new String("<DUNION>"));
      OmlUnaryOperatorQuotes.qmap.put(IQPOWER, new String("<POWER>"));
      OmlUnaryOperatorQuotes.qmap.put(IQLEN, new String("<LEN>"));
      OmlUnaryOperatorQuotes.qmap.put(IQPLUS, new String("<PLUS>"));
      OmlUnaryOperatorQuotes.qmap.put(IQDOM, new String("<DOM>"));
      OmlUnaryOperatorQuotes.qmap.put(IQDMERGE, new String("<DMERGE>"));
      OmlUnaryOperatorQuotes.qmap.put(IQDINTER, new String("<DINTER>"));
      OmlUnaryOperatorQuotes.qmap.put(IQNOT, new String("<NOT>"));
      OmlUnaryOperatorQuotes.qmap.put(IQMINUS, new String("<MINUS>"));
      OmlUnaryOperatorQuotes.qmap.put(IQRNG, new String("<RNG>"));
      OmlUnaryOperatorQuotes.qmap.put(IQFLOOR, new String("<FLOOR>"));
      OmlUnaryOperatorQuotes.qmap.put(IQDCONC, new String("<DCONC>"));
    }
    catch (Throwable e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=static


// ***** VDMTOOLS START Name=OmlUnaryOperatorQuotes KEEP=NO
  public OmlUnaryOperatorQuotes () throws CGException {}
// ***** VDMTOOLS END Name=OmlUnaryOperatorQuotes


// ***** VDMTOOLS START Name=getQuoteName KEEP=NO
  static public String getQuoteName (final Long pid) throws CGException {
    return UTIL.ConvertToString(qmap.get(pid));
  }
// ***** VDMTOOLS END Name=getQuoteName


// ***** VDMTOOLS START Name=validQuote KEEP=NO
  static public Boolean validQuote (final Long pid) throws CGException {

    Boolean rexpr_2 = null;
    rexpr_2 = new Boolean(qmap.containsKey(pid));
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=validQuote

}
;
