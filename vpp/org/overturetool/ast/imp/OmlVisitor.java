//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Mon 07-Jul-2008 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 06-Jun-2008 09:02:11)
//
// Supported compilers:
// jdk1.4
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.ast.imp;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import org.overturetool.ast.itf.*;
// ***** VDMTOOLS END Name=imports



public class OmlVisitor implements IOmlVisitor {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp


// ***** VDMTOOLS START Name=OmlVisitor KEEP=NO
  public OmlVisitor () throws CGException {}
// ***** VDMTOOLS END Name=OmlVisitor


// ***** VDMTOOLS START Name=visitDocument KEEP=NO
  public void visitDocument (final IOmlDocument var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitDocument


// ***** VDMTOOLS START Name=visitLexem KEEP=NO
  public void visitLexem (final IOmlLexem var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitLexem


// ***** VDMTOOLS START Name=visitOldName KEEP=NO
  public void visitOldName (final IOmlOldName var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOldName


// ***** VDMTOOLS START Name=visitIntType KEEP=NO
  public void visitIntType (final IOmlIntType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIntType


// ***** VDMTOOLS START Name=visitSeqConcPattern KEEP=NO
  public void visitSeqConcPattern (final IOmlSeqConcPattern var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSeqConcPattern


// ***** VDMTOOLS START Name=visitSkipStatement KEEP=NO
  public void visitSkipStatement (final IOmlSkipStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSkipStatement


// ***** VDMTOOLS START Name=visitPeriodicThread KEEP=NO
  public void visitPeriodicThread (final IOmlPeriodicThread var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitPeriodicThread


// ***** VDMTOOLS START Name=visitCallStatement KEEP=NO
  public void visitCallStatement (final IOmlCallStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCallStatement


// ***** VDMTOOLS START Name=visitIsofclassExpression KEEP=NO
  public void visitIsofclassExpression (final IOmlIsofclassExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIsofclassExpression


// ***** VDMTOOLS START Name=visitIndexForLoop KEEP=NO
  public void visitIndexForLoop (final IOmlIndexForLoop var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIndexForLoop


// ***** VDMTOOLS START Name=visitTextLiteral KEEP=NO
  public void visitTextLiteral (final IOmlTextLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTextLiteral


// ***** VDMTOOLS START Name=visitSymbolicLiteralExpression KEEP=NO
  public void visitSymbolicLiteralExpression (final IOmlSymbolicLiteralExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSymbolicLiteralExpression


// ***** VDMTOOLS START Name=visitReqExpression KEEP=NO
  public void visitReqExpression (final IOmlReqExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitReqExpression


// ***** VDMTOOLS START Name=visitPermissionPredicate KEEP=NO
  public void visitPermissionPredicate (final IOmlPermissionPredicate var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitPermissionPredicate


// ***** VDMTOOLS START Name=visitProcedureThread KEEP=NO
  public void visitProcedureThread (final IOmlProcedureThread var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitProcedureThread


// ***** VDMTOOLS START Name=visitSetType KEEP=NO
  public void visitSetType (final IOmlSetType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSetType


// ***** VDMTOOLS START Name=visitMapEnumeration KEEP=NO
  public void visitMapEnumeration (final IOmlMapEnumeration var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMapEnumeration


// ***** VDMTOOLS START Name=visitNewExpression KEEP=NO
  public void visitNewExpression (final IOmlNewExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNewExpression


// ***** VDMTOOLS START Name=visitAtomicStatement KEEP=NO
  public void visitAtomicStatement (final IOmlAtomicStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitAtomicStatement


// ***** VDMTOOLS START Name=visitFieldReference KEEP=NO
  public void visitFieldReference (final IOmlFieldReference var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFieldReference


// ***** VDMTOOLS START Name=visitClass KEEP=NO
  public void visitClass (final IOmlClass var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitClass


// ***** VDMTOOLS START Name=visitBlockStatement KEEP=NO
  public void visitBlockStatement (final IOmlBlockStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBlockStatement


// ***** VDMTOOLS START Name=visitUnaryExpression KEEP=NO
  public void visitUnaryExpression (final IOmlUnaryExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitUnaryExpression


// ***** VDMTOOLS START Name=visitInjectiveMapType KEEP=NO
  public void visitInjectiveMapType (final IOmlInjectiveMapType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInjectiveMapType


// ***** VDMTOOLS START Name=visitNumericLiteral KEEP=NO
  public void visitNumericLiteral (final IOmlNumericLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNumericLiteral


// ***** VDMTOOLS START Name=visitMatchValue KEEP=NO
  public void visitMatchValue (final IOmlMatchValue var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMatchValue


// ***** VDMTOOLS START Name=visitOperationTrailer KEEP=NO
  public void visitOperationTrailer (final IOmlOperationTrailer var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOperationTrailer


// ***** VDMTOOLS START Name=visitTypeDefinitions KEEP=NO
  public void visitTypeDefinitions (final IOmlTypeDefinitions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTypeDefinitions


// ***** VDMTOOLS START Name=visitTypeBind KEEP=NO
  public void visitTypeBind (final IOmlTypeBind var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTypeBind


// ***** VDMTOOLS START Name=visitRecordModifier KEEP=NO
  public void visitRecordModifier (final IOmlRecordModifier var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitRecordModifier


// ***** VDMTOOLS START Name=visitObjectDesignatorExpression KEEP=NO
  public void visitObjectDesignatorExpression (final IOmlObjectDesignatorExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitObjectDesignatorExpression


// ***** VDMTOOLS START Name=visitTraceLetBinding KEEP=NO
  public void visitTraceLetBinding (final IOmlTraceLetBinding var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTraceLetBinding


// ***** VDMTOOLS START Name=visitIdentifierTypePair KEEP=NO
  public void visitIdentifierTypePair (final IOmlIdentifierTypePair var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIdentifierTypePair


// ***** VDMTOOLS START Name=visitRealLiteral KEEP=NO
  public void visitRealLiteral (final IOmlRealLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitRealLiteral


// ***** VDMTOOLS START Name=visitPatternBindExpression KEEP=NO
  public void visitPatternBindExpression (final IOmlPatternBindExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitPatternBindExpression


// ***** VDMTOOLS START Name=visitTrapDefinition KEEP=NO
  public void visitTrapDefinition (final IOmlTrapDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTrapDefinition


// ***** VDMTOOLS START Name=visitSelfExpression KEEP=NO
  public void visitSelfExpression (final IOmlSelfExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSelfExpression


// ***** VDMTOOLS START Name=visitRecursiveTrapStatement KEEP=NO
  public void visitRecursiveTrapStatement (final IOmlRecursiveTrapStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitRecursiveTrapStatement


// ***** VDMTOOLS START Name=visitOperationDefinition KEEP=NO
  public void visitOperationDefinition (final IOmlOperationDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOperationDefinition


// ***** VDMTOOLS START Name=visitWhileLoop KEEP=NO
  public void visitWhileLoop (final IOmlWhileLoop var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitWhileLoop


// ***** VDMTOOLS START Name=visitDefStatement KEEP=NO
  public void visitDefStatement (final IOmlDefStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitDefStatement


// ***** VDMTOOLS START Name=visitSeq0Type KEEP=NO
  public void visitSeq0Type (final IOmlSeq0Type var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSeq0Type


// ***** VDMTOOLS START Name=visitSetForLoop KEEP=NO
  public void visitSetForLoop (final IOmlSetForLoop var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSetForLoop


// ***** VDMTOOLS START Name=visitDefExpression KEEP=NO
  public void visitDefExpression (final IOmlDefExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitDefExpression


// ***** VDMTOOLS START Name=visitDurationStatement KEEP=NO
  public void visitDurationStatement (final IOmlDurationStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitDurationStatement


// ***** VDMTOOLS START Name=visitImplicitOperation KEEP=NO
  public void visitImplicitOperation (final IOmlImplicitOperation var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitImplicitOperation


// ***** VDMTOOLS START Name=visitTypeVariable KEEP=NO
  public void visitTypeVariable (final IOmlTypeVariable var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTypeVariable


// ***** VDMTOOLS START Name=visitCompositeType KEEP=NO
  public void visitCompositeType (final IOmlCompositeType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCompositeType


// ***** VDMTOOLS START Name=visitTraceChoiceDefinition KEEP=NO
  public void visitTraceChoiceDefinition (final IOmlTraceChoiceDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTraceChoiceDefinition


// ***** VDMTOOLS START Name=visitOperationType KEEP=NO
  public void visitOperationType (final IOmlOperationType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOperationType


// ***** VDMTOOLS START Name=visitBooleanLiteral KEEP=NO
  public void visitBooleanLiteral (final IOmlBooleanLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBooleanLiteral


// ***** VDMTOOLS START Name=visitCasesStatementAlternative KEEP=NO
  public void visitCasesStatementAlternative (final IOmlCasesStatementAlternative var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCasesStatementAlternative


// ***** VDMTOOLS START Name=visitActiveExpression KEEP=NO
  public void visitActiveExpression (final IOmlActiveExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitActiveExpression


// ***** VDMTOOLS START Name=visitForAllExpression KEEP=NO
  public void visitForAllExpression (final IOmlForAllExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitForAllExpression


// ***** VDMTOOLS START Name=visitSpecifications KEEP=NO
  public void visitSpecifications (final IOmlSpecifications var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSpecifications


// ***** VDMTOOLS START Name=visitCasesExpression KEEP=NO
  public void visitCasesExpression (final IOmlCasesExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCasesExpression


// ***** VDMTOOLS START Name=visitIfExpression KEEP=NO
  public void visitIfExpression (final IOmlIfExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIfExpression


// ***** VDMTOOLS START Name=visitValueDefinitions KEEP=NO
  public void visitValueDefinitions (final IOmlValueDefinitions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitValueDefinitions


// ***** VDMTOOLS START Name=visitCasesStatement KEEP=NO
  public void visitCasesStatement (final IOmlCasesStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCasesStatement


// ***** VDMTOOLS START Name=visitErrorStatement KEEP=NO
  public void visitErrorStatement (final IOmlErrorStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitErrorStatement


// ***** VDMTOOLS START Name=visitImplicitFunction KEEP=NO
  public void visitImplicitFunction (final IOmlImplicitFunction var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitImplicitFunction


// ***** VDMTOOLS START Name=visitNatType KEEP=NO
  public void visitNatType (final IOmlNatType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNatType


// ***** VDMTOOLS START Name=visitSamebaseclassExpression KEEP=NO
  public void visitSamebaseclassExpression (final IOmlSamebaseclassExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSamebaseclassExpression


// ***** VDMTOOLS START Name=visitComplexType KEEP=NO
  public void visitComplexType (final IOmlComplexType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitComplexType


// ***** VDMTOOLS START Name=visitExternals KEEP=NO
  public void visitExternals (final IOmlExternals var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExternals


// ***** VDMTOOLS START Name=visitSubsequenceExpression KEEP=NO
  public void visitSubsequenceExpression (final IOmlSubsequenceExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSubsequenceExpression


// ***** VDMTOOLS START Name=visitElseIfStatement KEEP=NO
  public void visitElseIfStatement (final IOmlElseIfStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitElseIfStatement


// ***** VDMTOOLS START Name=visitGeneralMapType KEEP=NO
  public void visitGeneralMapType (final IOmlGeneralMapType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitGeneralMapType


// ***** VDMTOOLS START Name=visitSpecificationStatement KEEP=NO
  public void visitSpecificationStatement (final IOmlSpecificationStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSpecificationStatement


// ***** VDMTOOLS START Name=visitTuplePattern KEEP=NO
  public void visitTuplePattern (final IOmlTuplePattern var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTuplePattern


// ***** VDMTOOLS START Name=visitTraceBracketedDefinition KEEP=NO
  public void visitTraceBracketedDefinition (final IOmlTraceBracketedDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTraceBracketedDefinition


// ***** VDMTOOLS START Name=visitField KEEP=NO
  public void visitField (final IOmlField var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitField


// ***** VDMTOOLS START Name=visitNamedTrace KEEP=NO
  public void visitNamedTrace (final IOmlNamedTrace var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNamedTrace


// ***** VDMTOOLS START Name=visitTraceSequenceDefinition KEEP=NO
  public void visitTraceSequenceDefinition (final IOmlTraceSequenceDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTraceSequenceDefinition


// ***** VDMTOOLS START Name=visitTokenType KEEP=NO
  public void visitTokenType (final IOmlTokenType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTokenType


// ***** VDMTOOLS START Name=visitTraceRange KEEP=NO
  public void visitTraceRange (final IOmlTraceRange var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTraceRange


// ***** VDMTOOLS START Name=visitTypeName KEEP=NO
  public void visitTypeName (final IOmlTypeName var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTypeName


// ***** VDMTOOLS START Name=visitTypeDefinition KEEP=NO
  public void visitTypeDefinition (final IOmlTypeDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTypeDefinition


// ***** VDMTOOLS START Name=visitExplicitOperation KEEP=NO
  public void visitExplicitOperation (final IOmlExplicitOperation var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExplicitOperation


// ***** VDMTOOLS START Name=visitAssignmentDefinition KEEP=NO
  public void visitAssignmentDefinition (final IOmlAssignmentDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitAssignmentDefinition


// ***** VDMTOOLS START Name=visitSameclassExpression KEEP=NO
  public void visitSameclassExpression (final IOmlSameclassExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSameclassExpression


// ***** VDMTOOLS START Name=visitExitStatement KEEP=NO
  public void visitExitStatement (final IOmlExitStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExitStatement


// ***** VDMTOOLS START Name=visitExistsExpression KEEP=NO
  public void visitExistsExpression (final IOmlExistsExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExistsExpression


// ***** VDMTOOLS START Name=visitParameter KEEP=NO
  public void visitParameter (final IOmlParameter var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitParameter


// ***** VDMTOOLS START Name=visitFunctionTypeInstantiation KEEP=NO
  public void visitFunctionTypeInstantiation (final IOmlFunctionTypeInstantiation var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFunctionTypeInstantiation


// ***** VDMTOOLS START Name=visitSequenceEnumeration KEEP=NO
  public void visitSequenceEnumeration (final IOmlSequenceEnumeration var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSequenceEnumeration


// ***** VDMTOOLS START Name=visitObjectApply KEEP=NO
  public void visitObjectApply (final IOmlObjectApply var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitObjectApply


// ***** VDMTOOLS START Name=visitSetUnionPattern KEEP=NO
  public void visitSetUnionPattern (final IOmlSetUnionPattern var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSetUnionPattern


// ***** VDMTOOLS START Name=visitTraceOneOrMore KEEP=NO
  public void visitTraceOneOrMore (final IOmlTraceOneOrMore var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTraceOneOrMore


// ***** VDMTOOLS START Name=visitStartStatement KEEP=NO
  public void visitStartStatement (final IOmlStartStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitStartStatement


// ***** VDMTOOLS START Name=visitError KEEP=NO
  public void visitError (final IOmlError var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitError


// ***** VDMTOOLS START Name=visitIfStatement KEEP=NO
  public void visitIfStatement (final IOmlIfStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIfStatement


// ***** VDMTOOLS START Name=visitLetBeExpression KEEP=NO
  public void visitLetBeExpression (final IOmlLetBeExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitLetBeExpression


// ***** VDMTOOLS START Name=visitTotalFunctionType KEEP=NO
  public void visitTotalFunctionType (final IOmlTotalFunctionType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTotalFunctionType


// ***** VDMTOOLS START Name=visitNilLiteral KEEP=NO
  public void visitNilLiteral (final IOmlNilLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNilLiteral


// ***** VDMTOOLS START Name=visitSporadicThread KEEP=NO
  public void visitSporadicThread (final IOmlSporadicThread var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSporadicThread


// ***** VDMTOOLS START Name=visitMapComprehension KEEP=NO
  public void visitMapComprehension (final IOmlMapComprehension var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMapComprehension


// ***** VDMTOOLS START Name=visitFunctionDefinition KEEP=NO
  public void visitFunctionDefinition (final IOmlFunctionDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFunctionDefinition


// ***** VDMTOOLS START Name=visitRecordConstructor KEEP=NO
  public void visitRecordConstructor (final IOmlRecordConstructor var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitRecordConstructor


// ***** VDMTOOLS START Name=visitBoolType KEEP=NO
  public void visitBoolType (final IOmlBoolType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBoolType


// ***** VDMTOOLS START Name=visitSetBind KEEP=NO
  public void visitSetBind (final IOmlSetBind var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSetBind


// ***** VDMTOOLS START Name=visitNondeterministicStatement KEEP=NO
  public void visitNondeterministicStatement (final IOmlNondeterministicStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNondeterministicStatement


// ***** VDMTOOLS START Name=visitInstanceVariable KEEP=NO
  public void visitInstanceVariable (final IOmlInstanceVariable var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInstanceVariable


// ***** VDMTOOLS START Name=visitLetExpression KEEP=NO
  public void visitLetExpression (final IOmlLetExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitLetExpression


// ***** VDMTOOLS START Name=visitPatternIdentifier KEEP=NO
  public void visitPatternIdentifier (final IOmlPatternIdentifier var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitPatternIdentifier


// ***** VDMTOOLS START Name=visitSymbolicLiteralPattern KEEP=NO
  public void visitSymbolicLiteralPattern (final IOmlSymbolicLiteralPattern var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSymbolicLiteralPattern


// ***** VDMTOOLS START Name=visitTupleConstructor KEEP=NO
  public void visitTupleConstructor (final IOmlTupleConstructor var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTupleConstructor


// ***** VDMTOOLS START Name=visitTraceZeroOrMore KEEP=NO
  public void visitTraceZeroOrMore (final IOmlTraceZeroOrMore var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTraceZeroOrMore


// ***** VDMTOOLS START Name=visitOptionalType KEEP=NO
  public void visitOptionalType (final IOmlOptionalType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOptionalType


// ***** VDMTOOLS START Name=visitMutexAllPredicate KEEP=NO
  public void visitMutexAllPredicate (final IOmlMutexAllPredicate var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMutexAllPredicate


// ***** VDMTOOLS START Name=visitAccessDefinition KEEP=NO
  public void visitAccessDefinition (final IOmlAccessDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitAccessDefinition


// ***** VDMTOOLS START Name=visitSequenceComprehension KEEP=NO
  public void visitSequenceComprehension (final IOmlSequenceComprehension var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSequenceComprehension


// ***** VDMTOOLS START Name=visitEqualsDefinition KEEP=NO
  public void visitEqualsDefinition (final IOmlEqualsDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitEqualsDefinition


// ***** VDMTOOLS START Name=visitMaplet KEEP=NO
  public void visitMaplet (final IOmlMaplet var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMaplet


// ***** VDMTOOLS START Name=visitExistsUniqueExpression KEEP=NO
  public void visitExistsUniqueExpression (final IOmlExistsUniqueExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExistsUniqueExpression


// ***** VDMTOOLS START Name=visitThreadIdExpression KEEP=NO
  public void visitThreadIdExpression (final IOmlThreadIdExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitThreadIdExpression


// ***** VDMTOOLS START Name=visitExtendedExplicitOperation KEEP=NO
  public void visitExtendedExplicitOperation (final IOmlExtendedExplicitOperation var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExtendedExplicitOperation


// ***** VDMTOOLS START Name=visitSetComprehension KEEP=NO
  public void visitSetComprehension (final IOmlSetComprehension var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSetComprehension


// ***** VDMTOOLS START Name=visitIotaExpression KEEP=NO
  public void visitIotaExpression (final IOmlIotaExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIotaExpression


// ***** VDMTOOLS START Name=visitReturnStatement KEEP=NO
  public void visitReturnStatement (final IOmlReturnStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitReturnStatement


// ***** VDMTOOLS START Name=visitTraceZeroOrOne KEEP=NO
  public void visitTraceZeroOrOne (final IOmlTraceZeroOrOne var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTraceZeroOrOne


// ***** VDMTOOLS START Name=visitSetEnumPattern KEEP=NO
  public void visitSetEnumPattern (final IOmlSetEnumPattern var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSetEnumPattern


// ***** VDMTOOLS START Name=visitFunctionDefinitions KEEP=NO
  public void visitFunctionDefinitions (final IOmlFunctionDefinitions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFunctionDefinitions


// ***** VDMTOOLS START Name=visitTrapStatement KEEP=NO
  public void visitTrapStatement (final IOmlTrapStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTrapStatement


// ***** VDMTOOLS START Name=visitFieldSelect KEEP=NO
  public void visitFieldSelect (final IOmlFieldSelect var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFieldSelect


// ***** VDMTOOLS START Name=visitFunctionTypeSelect KEEP=NO
  public void visitFunctionTypeSelect (final IOmlFunctionTypeSelect var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFunctionTypeSelect


// ***** VDMTOOLS START Name=visitSeq1Type KEEP=NO
  public void visitSeq1Type (final IOmlSeq1Type var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSeq1Type


// ***** VDMTOOLS START Name=visitOperationBody KEEP=NO
  public void visitOperationBody (final IOmlOperationBody var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOperationBody


// ***** VDMTOOLS START Name=visitClassTypeInstantiation KEEP=NO
  public void visitClassTypeInstantiation (final IOmlClassTypeInstantiation var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitClassTypeInstantiation


// ***** VDMTOOLS START Name=visitApplyExpression KEEP=NO
  public void visitApplyExpression (final IOmlApplyExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitApplyExpression


// ***** VDMTOOLS START Name=visitValueShape KEEP=NO
  public void visitValueShape (final IOmlValueShape var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitValueShape


// ***** VDMTOOLS START Name=visitCyclesStatement KEEP=NO
  public void visitCyclesStatement (final IOmlCyclesStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCyclesStatement


// ***** VDMTOOLS START Name=visitOperationDefinitions KEEP=NO
  public void visitOperationDefinitions (final IOmlOperationDefinitions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitOperationDefinitions


// ***** VDMTOOLS START Name=visitExplicitFunction KEEP=NO
  public void visitExplicitFunction (final IOmlExplicitFunction var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExplicitFunction


// ***** VDMTOOLS START Name=visitPreconditionExpression KEEP=NO
  public void visitPreconditionExpression (final IOmlPreconditionExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitPreconditionExpression


// ***** VDMTOOLS START Name=visitTraceLetBeBinding KEEP=NO
  public void visitTraceLetBeBinding (final IOmlTraceLetBeBinding var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTraceLetBeBinding


// ***** VDMTOOLS START Name=visitQuoteLiteral KEEP=NO
  public void visitQuoteLiteral (final IOmlQuoteLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitQuoteLiteral


// ***** VDMTOOLS START Name=visitVarInformation KEEP=NO
  public void visitVarInformation (final IOmlVarInformation var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitVarInformation


// ***** VDMTOOLS START Name=visitIsofbaseclassExpression KEEP=NO
  public void visitIsofbaseclassExpression (final IOmlIsofbaseclassExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIsofbaseclassExpression


// ***** VDMTOOLS START Name=visitLetStatement KEEP=NO
  public void visitLetStatement (final IOmlLetStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitLetStatement


// ***** VDMTOOLS START Name=visitActExpression KEEP=NO
  public void visitActExpression (final IOmlActExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitActExpression


// ***** VDMTOOLS START Name=visitExceptions KEEP=NO
  public void visitExceptions (final IOmlExceptions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExceptions


// ***** VDMTOOLS START Name=visitIsExpression KEEP=NO
  public void visitIsExpression (final IOmlIsExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitIsExpression


// ***** VDMTOOLS START Name=visitTraceDefinitions KEEP=NO
  public void visitTraceDefinitions (final IOmlTraceDefinitions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTraceDefinitions


// ***** VDMTOOLS START Name=visitValueDefinition KEEP=NO
  public void visitValueDefinition (final IOmlValueDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitValueDefinition


// ***** VDMTOOLS START Name=visitCasesExpressionAlternative KEEP=NO
  public void visitCasesExpressionAlternative (final IOmlCasesExpressionAlternative var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCasesExpressionAlternative


// ***** VDMTOOLS START Name=visitLetBeStatement KEEP=NO
  public void visitLetBeStatement (final IOmlLetBeStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitLetBeStatement


// ***** VDMTOOLS START Name=visitMutexPredicate KEEP=NO
  public void visitMutexPredicate (final IOmlMutexPredicate var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMutexPredicate


// ***** VDMTOOLS START Name=visitUndefinedExpression KEEP=NO
  public void visitUndefinedExpression (final IOmlUndefinedExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitUndefinedExpression


// ***** VDMTOOLS START Name=visitSetEnumeration KEEP=NO
  public void visitSetEnumeration (final IOmlSetEnumeration var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSetEnumeration


// ***** VDMTOOLS START Name=visitCharacterLiteral KEEP=NO
  public void visitCharacterLiteral (final IOmlCharacterLiteral var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCharacterLiteral


// ***** VDMTOOLS START Name=visitAssignStatement KEEP=NO
  public void visitAssignStatement (final IOmlAssignStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitAssignStatement


// ***** VDMTOOLS START Name=visitProductType KEEP=NO
  public void visitProductType (final IOmlProductType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitProductType


// ***** VDMTOOLS START Name=visitSequenceForLoop KEEP=NO
  public void visitSequenceForLoop (final IOmlSequenceForLoop var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSequenceForLoop


// ***** VDMTOOLS START Name=visitInstanceVariableDefinitions KEEP=NO
  public void visitInstanceVariableDefinitions (final IOmlInstanceVariableDefinitions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInstanceVariableDefinitions


// ***** VDMTOOLS START Name=visitRealType KEEP=NO
  public void visitRealType (final IOmlRealType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitRealType


// ***** VDMTOOLS START Name=visitCharType KEEP=NO
  public void visitCharType (final IOmlCharType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitCharType


// ***** VDMTOOLS START Name=visitTraceMethodApply KEEP=NO
  public void visitTraceMethodApply (final IOmlTraceMethodApply var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTraceMethodApply


// ***** VDMTOOLS START Name=visitWaitingExpression KEEP=NO
  public void visitWaitingExpression (final IOmlWaitingExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitWaitingExpression


// ***** VDMTOOLS START Name=visitInvariant KEEP=NO
  public void visitInvariant (final IOmlInvariant var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInvariant


// ***** VDMTOOLS START Name=visitObjectFieldReference KEEP=NO
  public void visitObjectFieldReference (final IOmlObjectFieldReference var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitObjectFieldReference


// ***** VDMTOOLS START Name=visitEmptyType KEEP=NO
  public void visitEmptyType (final IOmlEmptyType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitEmptyType


// ***** VDMTOOLS START Name=visitBracketedType KEEP=NO
  public void visitBracketedType (final IOmlBracketedType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBracketedType


// ***** VDMTOOLS START Name=visitFinExpression KEEP=NO
  public void visitFinExpression (final IOmlFinExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFinExpression


// ***** VDMTOOLS START Name=visitSetRangeExpression KEEP=NO
  public void visitSetRangeExpression (final IOmlSetRangeExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSetRangeExpression


// ***** VDMTOOLS START Name=visitSimpleType KEEP=NO
  public void visitSimpleType (final IOmlSimpleType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSimpleType


// ***** VDMTOOLS START Name=visitTokenExpression KEEP=NO
  public void visitTokenExpression (final IOmlTokenExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTokenExpression


// ***** VDMTOOLS START Name=visitBracketedExpression KEEP=NO
  public void visitBracketedExpression (final IOmlBracketedExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBracketedExpression


// ***** VDMTOOLS START Name=visitFunctionBody KEEP=NO
  public void visitFunctionBody (final IOmlFunctionBody var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFunctionBody


// ***** VDMTOOLS START Name=visitLambdaExpression KEEP=NO
  public void visitLambdaExpression (final IOmlLambdaExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitLambdaExpression


// ***** VDMTOOLS START Name=visitInstanceVariableInvariant KEEP=NO
  public void visitInstanceVariableInvariant (final IOmlInstanceVariableInvariant var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInstanceVariableInvariant


// ***** VDMTOOLS START Name=visitPartialFunctionType KEEP=NO
  public void visitPartialFunctionType (final IOmlPartialFunctionType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitPartialFunctionType


// ***** VDMTOOLS START Name=visitInheritanceClause KEEP=NO
  public void visitInheritanceClause (final IOmlInheritanceClause var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitInheritanceClause


// ***** VDMTOOLS START Name=visitDontCarePattern KEEP=NO
  public void visitDontCarePattern (final IOmlDontCarePattern var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitDontCarePattern


// ***** VDMTOOLS START Name=visitSeqEnumPattern KEEP=NO
  public void visitSeqEnumPattern (final IOmlSeqEnumPattern var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSeqEnumPattern


// ***** VDMTOOLS START Name=visitUnionType KEEP=NO
  public void visitUnionType (final IOmlUnionType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitUnionType


// ***** VDMTOOLS START Name=visitTraceDefinitionItem KEEP=NO
  public void visitTraceDefinitionItem (final IOmlTraceDefinitionItem var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTraceDefinitionItem


// ***** VDMTOOLS START Name=visitTypelessExplicitFunction KEEP=NO
  public void visitTypelessExplicitFunction (final IOmlTypelessExplicitFunction var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTypelessExplicitFunction


// ***** VDMTOOLS START Name=visitThreadDefinition KEEP=NO
  public void visitThreadDefinition (final IOmlThreadDefinition var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitThreadDefinition


// ***** VDMTOOLS START Name=visitAlwaysStatement KEEP=NO
  public void visitAlwaysStatement (final IOmlAlwaysStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitAlwaysStatement


// ***** VDMTOOLS START Name=visitRecordPattern KEEP=NO
  public void visitRecordPattern (final IOmlRecordPattern var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitRecordPattern


// ***** VDMTOOLS START Name=visitQuoteType KEEP=NO
  public void visitQuoteType (final IOmlQuoteType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitQuoteType


// ***** VDMTOOLS START Name=visitDclStatement KEEP=NO
  public void visitDclStatement (final IOmlDclStatement var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitDclStatement


// ***** VDMTOOLS START Name=visitBinaryExpression KEEP=NO
  public void visitBinaryExpression (final IOmlBinaryExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBinaryExpression


// ***** VDMTOOLS START Name=visitPatternTypePair KEEP=NO
  public void visitPatternTypePair (final IOmlPatternTypePair var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitPatternTypePair


// ***** VDMTOOLS START Name=visitMapOrSequenceReference KEEP=NO
  public void visitMapOrSequenceReference (final IOmlMapOrSequenceReference var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMapOrSequenceReference


// ***** VDMTOOLS START Name=visitElseIfExpression KEEP=NO
  public void visitElseIfExpression (final IOmlElseIfExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitElseIfExpression


// ***** VDMTOOLS START Name=visitName KEEP=NO
  public void visitName (final IOmlName var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitName


// ***** VDMTOOLS START Name=visitNat1Type KEEP=NO
  public void visitNat1Type (final IOmlNat1Type var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitNat1Type


// ***** VDMTOOLS START Name=visitSynchronizationDefinitions KEEP=NO
  public void visitSynchronizationDefinitions (final IOmlSynchronizationDefinitions var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitSynchronizationDefinitions


// ***** VDMTOOLS START Name=visitMuExpression KEEP=NO
  public void visitMuExpression (final IOmlMuExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMuExpression


// ***** VDMTOOLS START Name=visitFunctionTrailer KEEP=NO
  public void visitFunctionTrailer (final IOmlFunctionTrailer var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitFunctionTrailer


// ***** VDMTOOLS START Name=visitTimeExpression KEEP=NO
  public void visitTimeExpression (final IOmlTimeExpression var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitTimeExpression


// ***** VDMTOOLS START Name=visitRatType KEEP=NO
  public void visitRatType (final IOmlRatType var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitRatType


// ***** VDMTOOLS START Name=visitStateDesignatorName KEEP=NO
  public void visitStateDesignatorName (final IOmlStateDesignatorName var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitStateDesignatorName


// ***** VDMTOOLS START Name=visitExtendedExplicitFunction KEEP=NO
  public void visitExtendedExplicitFunction (final IOmlExtendedExplicitFunction var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitExtendedExplicitFunction


// ***** VDMTOOLS START Name=visitContextInfo KEEP=NO
  public void visitContextInfo (final IOmlContextInfo var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitContextInfo


// ***** VDMTOOLS START Name=visitNode KEEP=NO
  public void visitNode (final IOmlNode pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlTraceCoreDefinition).booleanValue()) 
      visitTraceCoreDefinition((IOmlTraceCoreDefinition) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlOldName).booleanValue()) 
        visitOldName((IOmlOldName) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlIntType).booleanValue()) 
          visitIntType((IOmlIntType) pNode);
        else {
          if (new Boolean(pNode instanceof IOmlSeqConcPattern).booleanValue()) 
            visitSeqConcPattern((IOmlSeqConcPattern) pNode);
          else {
            if (new Boolean(pNode instanceof IOmlSkipStatement).booleanValue()) 
              visitSkipStatement((IOmlSkipStatement) pNode);
            else {
              if (new Boolean(pNode instanceof IOmlPeriodicThread).booleanValue()) 
                visitPeriodicThread((IOmlPeriodicThread) pNode);
              else {
                if (new Boolean(pNode instanceof IOmlCallStatement).booleanValue()) 
                  visitCallStatement((IOmlCallStatement) pNode);
                else {
                  if (new Boolean(pNode instanceof IOmlIsofclassExpression).booleanValue()) 
                    visitIsofclassExpression((IOmlIsofclassExpression) pNode);
                  else {
                    if (new Boolean(pNode instanceof IOmlIndexForLoop).booleanValue()) 
                      visitIndexForLoop((IOmlIndexForLoop) pNode);
                    else {
                      if (new Boolean(pNode instanceof IOmlTraceDefinition).booleanValue()) 
                        visitTraceDefinition((IOmlTraceDefinition) pNode);
                      else {
                        if (new Boolean(pNode instanceof IOmlSymbolicLiteralExpression).booleanValue()) 
                          visitSymbolicLiteralExpression((IOmlSymbolicLiteralExpression) pNode);
                        else {
                          if (new Boolean(pNode instanceof IOmlTextLiteral).booleanValue()) 
                            visitTextLiteral((IOmlTextLiteral) pNode);
                          else {
                            if (new Boolean(pNode instanceof IOmlDefinitionBlock).booleanValue()) 
                              visitDefinitionBlock((IOmlDefinitionBlock) pNode);
                            else {
                              if (new Boolean(pNode instanceof IOmlReqExpression).booleanValue()) 
                                visitReqExpression((IOmlReqExpression) pNode);
                              else {
                                if (new Boolean(pNode instanceof IOmlPermissionPredicate).booleanValue()) 
                                  visitPermissionPredicate((IOmlPermissionPredicate) pNode);
                                else {
                                  if (new Boolean(pNode instanceof IOmlProcedureThread).booleanValue()) 
                                    visitProcedureThread((IOmlProcedureThread) pNode);
                                  else {
                                    if (new Boolean(pNode instanceof IOmlMode).booleanValue()) 
                                      visitMode((IOmlMode) pNode);
                                    else {
                                      if (new Boolean(pNode instanceof IOmlSetType).booleanValue()) 
                                        visitSetType((IOmlSetType) pNode);
                                      else {
                                        if (new Boolean(pNode instanceof IOmlMapEnumeration).booleanValue()) 
                                          visitMapEnumeration((IOmlMapEnumeration) pNode);
                                        else {
                                          if (new Boolean(pNode instanceof IOmlNewExpression).booleanValue()) 
                                            visitNewExpression((IOmlNewExpression) pNode);
                                          else {
                                            if (new Boolean(pNode instanceof IOmlFieldReference).booleanValue()) 
                                              visitFieldReference((IOmlFieldReference) pNode);
                                            else {
                                              if (new Boolean(pNode instanceof IOmlAtomicStatement).booleanValue()) 
                                                visitAtomicStatement((IOmlAtomicStatement) pNode);
                                              else {
                                                if (new Boolean(pNode instanceof IOmlClass).booleanValue()) 
                                                  visitClass((IOmlClass) pNode);
                                                else {
                                                  if (new Boolean(pNode instanceof IOmlBlockStatement).booleanValue()) 
                                                    visitBlockStatement((IOmlBlockStatement) pNode);
                                                  else {
                                                    if (new Boolean(pNode instanceof IOmlUnaryExpression).booleanValue()) 
                                                      visitUnaryExpression((IOmlUnaryExpression) pNode);
                                                    else {
                                                      if (new Boolean(pNode instanceof IOmlTraceBinding).booleanValue()) 
                                                        visitTraceBinding((IOmlTraceBinding) pNode);
                                                      else {
                                                        if (new Boolean(pNode instanceof IOmlSyncPredicate).booleanValue()) 
                                                          visitSyncPredicate((IOmlSyncPredicate) pNode);
                                                        else {
                                                          if (new Boolean(pNode instanceof IOmlInjectiveMapType).booleanValue()) 
                                                            visitInjectiveMapType((IOmlInjectiveMapType) pNode);
                                                          else {
                                                            if (new Boolean(pNode instanceof IOmlMatchValue).booleanValue()) 
                                                              visitMatchValue((IOmlMatchValue) pNode);
                                                            else {
                                                              if (new Boolean(pNode instanceof IOmlNumericLiteral).booleanValue()) 
                                                                visitNumericLiteral((IOmlNumericLiteral) pNode);
                                                              else {
                                                                if (new Boolean(pNode instanceof IOmlThreadSpecification).booleanValue()) 
                                                                  visitThreadSpecification((IOmlThreadSpecification) pNode);
                                                                else {
                                                                  if (new Boolean(pNode instanceof IOmlOperationTrailer).booleanValue()) 
                                                                    visitOperationTrailer((IOmlOperationTrailer) pNode);
                                                                  else {
                                                                    if (new Boolean(pNode instanceof IOmlTypeDefinitions).booleanValue()) 
                                                                      visitTypeDefinitions((IOmlTypeDefinitions) pNode);
                                                                    else {
                                                                      if (new Boolean(pNode instanceof IOmlTypeBind).booleanValue()) 
                                                                        visitTypeBind((IOmlTypeBind) pNode);
                                                                      else {
                                                                        if (new Boolean(pNode instanceof IOmlRecordModifier).booleanValue()) 
                                                                          visitRecordModifier((IOmlRecordModifier) pNode);
                                                                        else {
                                                                          if (new Boolean(pNode instanceof IOmlObjectDesignatorExpression).booleanValue()) 
                                                                            visitObjectDesignatorExpression((IOmlObjectDesignatorExpression) pNode);
                                                                          else {
                                                                            if (new Boolean(pNode instanceof IOmlIdentifierTypePair).booleanValue()) 
                                                                              visitIdentifierTypePair((IOmlIdentifierTypePair) pNode);
                                                                            else {
                                                                              if (new Boolean(pNode instanceof IOmlTraceLetBinding).booleanValue()) 
                                                                                visitTraceLetBinding((IOmlTraceLetBinding) pNode);
                                                                              else {
                                                                                if (new Boolean(pNode instanceof IOmlTrapDefinition).booleanValue()) 
                                                                                  visitTrapDefinition((IOmlTrapDefinition) pNode);
                                                                                else {
                                                                                  if (new Boolean(pNode instanceof IOmlRealLiteral).booleanValue()) 
                                                                                    visitRealLiteral((IOmlRealLiteral) pNode);
                                                                                  else {
                                                                                    if (new Boolean(pNode instanceof IOmlPatternBindExpression).booleanValue()) 
                                                                                      visitPatternBindExpression((IOmlPatternBindExpression) pNode);
                                                                                    else {
                                                                                      if (new Boolean(pNode instanceof IOmlSelfExpression).booleanValue()) 
                                                                                        visitSelfExpression((IOmlSelfExpression) pNode);
                                                                                      else {
                                                                                        if (new Boolean(pNode instanceof IOmlExpression).booleanValue()) 
                                                                                          visitExpression((IOmlExpression) pNode);
                                                                                        else {
                                                                                          if (new Boolean(pNode instanceof IOmlRecursiveTrapStatement).booleanValue()) 
                                                                                            visitRecursiveTrapStatement((IOmlRecursiveTrapStatement) pNode);
                                                                                          else {
                                                                                            if (new Boolean(pNode instanceof IOmlOperationDefinition).booleanValue()) 
                                                                                              visitOperationDefinition((IOmlOperationDefinition) pNode);
                                                                                            else {
                                                                                              if (new Boolean(pNode instanceof IOmlScope).booleanValue()) 
                                                                                                visitScope((IOmlScope) pNode);
                                                                                              else {
                                                                                                if (new Boolean(pNode instanceof IOmlWhileLoop).booleanValue()) 
                                                                                                  visitWhileLoop((IOmlWhileLoop) pNode);
                                                                                                else {
                                                                                                  if (new Boolean(pNode instanceof IOmlDefStatement).booleanValue()) 
                                                                                                    visitDefStatement((IOmlDefStatement) pNode);
                                                                                                  else {
                                                                                                    if (new Boolean(pNode instanceof IOmlSeq0Type).booleanValue()) 
                                                                                                      visitSeq0Type((IOmlSeq0Type) pNode);
                                                                                                    else {
                                                                                                      if (new Boolean(pNode instanceof IOmlSetForLoop).booleanValue()) 
                                                                                                        visitSetForLoop((IOmlSetForLoop) pNode);
                                                                                                      else {
                                                                                                        if (new Boolean(pNode instanceof IOmlDefExpression).booleanValue()) 
                                                                                                          visitDefExpression((IOmlDefExpression) pNode);
                                                                                                        else {
                                                                                                          if (new Boolean(pNode instanceof IOmlDurationStatement).booleanValue()) 
                                                                                                            visitDurationStatement((IOmlDurationStatement) pNode);
                                                                                                          else {
                                                                                                            if (new Boolean(pNode instanceof IOmlImplicitOperation).booleanValue()) 
                                                                                                              visitImplicitOperation((IOmlImplicitOperation) pNode);
                                                                                                            else {
                                                                                                              if (new Boolean(pNode instanceof IOmlTypeVariable).booleanValue()) 
                                                                                                                visitTypeVariable((IOmlTypeVariable) pNode);
                                                                                                              else {
                                                                                                                if (new Boolean(pNode instanceof IOmlCompositeType).booleanValue()) 
                                                                                                                  visitCompositeType((IOmlCompositeType) pNode);
                                                                                                                else {
                                                                                                                  if (new Boolean(pNode instanceof IOmlTraceChoiceDefinition).booleanValue()) 
                                                                                                                    visitTraceChoiceDefinition((IOmlTraceChoiceDefinition) pNode);
                                                                                                                  else {
                                                                                                                    if (new Boolean(pNode instanceof IOmlBooleanLiteral).booleanValue()) 
                                                                                                                      visitBooleanLiteral((IOmlBooleanLiteral) pNode);
                                                                                                                    else {
                                                                                                                      if (new Boolean(pNode instanceof IOmlOperationType).booleanValue()) 
                                                                                                                        visitOperationType((IOmlOperationType) pNode);
                                                                                                                      else {
                                                                                                                        if (new Boolean(pNode instanceof IOmlCasesStatementAlternative).booleanValue()) 
                                                                                                                          visitCasesStatementAlternative((IOmlCasesStatementAlternative) pNode);
                                                                                                                        else {
                                                                                                                          if (new Boolean(pNode instanceof IOmlActiveExpression).booleanValue()) 
                                                                                                                            visitActiveExpression((IOmlActiveExpression) pNode);
                                                                                                                          else {
                                                                                                                            if (new Boolean(pNode instanceof IOmlForAllExpression).booleanValue()) 
                                                                                                                              visitForAllExpression((IOmlForAllExpression) pNode);
                                                                                                                            else {
                                                                                                                              if (new Boolean(pNode instanceof IOmlSpecifications).booleanValue()) 
                                                                                                                                visitSpecifications((IOmlSpecifications) pNode);
                                                                                                                              else {
                                                                                                                                if (new Boolean(pNode instanceof IOmlCasesExpression).booleanValue()) 
                                                                                                                                  visitCasesExpression((IOmlCasesExpression) pNode);
                                                                                                                                else {
                                                                                                                                  if (new Boolean(pNode instanceof IOmlIfExpression).booleanValue()) 
                                                                                                                                    visitIfExpression((IOmlIfExpression) pNode);
                                                                                                                                  else {
                                                                                                                                    if (new Boolean(pNode instanceof IOmlValueDefinitions).booleanValue()) 
                                                                                                                                      visitValueDefinitions((IOmlValueDefinitions) pNode);
                                                                                                                                    else {
                                                                                                                                      if (new Boolean(pNode instanceof IOmlCasesStatement).booleanValue()) 
                                                                                                                                        visitCasesStatement((IOmlCasesStatement) pNode);
                                                                                                                                      else {
                                                                                                                                        if (new Boolean(pNode instanceof IOmlInstanceVariableShape).booleanValue()) 
                                                                                                                                          visitInstanceVariableShape((IOmlInstanceVariableShape) pNode);
                                                                                                                                        else {
                                                                                                                                          if (new Boolean(pNode instanceof IOmlErrorStatement).booleanValue()) 
                                                                                                                                            visitErrorStatement((IOmlErrorStatement) pNode);
                                                                                                                                          else {
                                                                                                                                            if (new Boolean(pNode instanceof IOmlImplicitFunction).booleanValue()) 
                                                                                                                                              visitImplicitFunction((IOmlImplicitFunction) pNode);
                                                                                                                                            else {
                                                                                                                                              if (new Boolean(pNode instanceof IOmlNatType).booleanValue()) 
                                                                                                                                                visitNatType((IOmlNatType) pNode);
                                                                                                                                              else {
                                                                                                                                                if (new Boolean(pNode instanceof IOmlSamebaseclassExpression).booleanValue()) 
                                                                                                                                                  visitSamebaseclassExpression((IOmlSamebaseclassExpression) pNode);
                                                                                                                                                else {
                                                                                                                                                  if (new Boolean(pNode instanceof IOmlComplexType).booleanValue()) 
                                                                                                                                                    visitComplexType((IOmlComplexType) pNode);
                                                                                                                                                  else {
                                                                                                                                                    if (new Boolean(pNode instanceof IOmlLiteral).booleanValue()) 
                                                                                                                                                      visitLiteral((IOmlLiteral) pNode);
                                                                                                                                                    else {
                                                                                                                                                      if (new Boolean(pNode instanceof IOmlExternals).booleanValue()) 
                                                                                                                                                        visitExternals((IOmlExternals) pNode);
                                                                                                                                                      else {
                                                                                                                                                        if (new Boolean(pNode instanceof IOmlSubsequenceExpression).booleanValue()) 
                                                                                                                                                          visitSubsequenceExpression((IOmlSubsequenceExpression) pNode);
                                                                                                                                                        else {
                                                                                                                                                          if (new Boolean(pNode instanceof IOmlElseIfStatement).booleanValue()) 
                                                                                                                                                            visitElseIfStatement((IOmlElseIfStatement) pNode);
                                                                                                                                                          else {
                                                                                                                                                            if (new Boolean(pNode instanceof IOmlGeneralMapType).booleanValue()) 
                                                                                                                                                              visitGeneralMapType((IOmlGeneralMapType) pNode);
                                                                                                                                                            else {
                                                                                                                                                              if (new Boolean(pNode instanceof IOmlSpecificationStatement).booleanValue()) 
                                                                                                                                                                visitSpecificationStatement((IOmlSpecificationStatement) pNode);
                                                                                                                                                              else {
                                                                                                                                                                if (new Boolean(pNode instanceof IOmlPattern).booleanValue()) 
                                                                                                                                                                  visitPattern((IOmlPattern) pNode);
                                                                                                                                                                else {
                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlTuplePattern).booleanValue()) 
                                                                                                                                                                    visitTuplePattern((IOmlTuplePattern) pNode);
                                                                                                                                                                  else {
                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlTraceBracketedDefinition).booleanValue()) 
                                                                                                                                                                      visitTraceBracketedDefinition((IOmlTraceBracketedDefinition) pNode);
                                                                                                                                                                    else {
                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlField).booleanValue()) 
                                                                                                                                                                        visitField((IOmlField) pNode);
                                                                                                                                                                      else {
                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlNamedTrace).booleanValue()) 
                                                                                                                                                                          visitNamedTrace((IOmlNamedTrace) pNode);
                                                                                                                                                                        else {
                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlTraceSequenceDefinition).booleanValue()) 
                                                                                                                                                                            visitTraceSequenceDefinition((IOmlTraceSequenceDefinition) pNode);
                                                                                                                                                                          else {
                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlStatement).booleanValue()) 
                                                                                                                                                                              visitStatement((IOmlStatement) pNode);
                                                                                                                                                                            else {
                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlTokenType).booleanValue()) 
                                                                                                                                                                                visitTokenType((IOmlTokenType) pNode);
                                                                                                                                                                              else {
                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlTraceRange).booleanValue()) 
                                                                                                                                                                                  visitTraceRange((IOmlTraceRange) pNode);
                                                                                                                                                                                else {
                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlTypeName).booleanValue()) 
                                                                                                                                                                                    visitTypeName((IOmlTypeName) pNode);
                                                                                                                                                                                  else {
                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlTypeDefinition).booleanValue()) 
                                                                                                                                                                                      visitTypeDefinition((IOmlTypeDefinition) pNode);
                                                                                                                                                                                    else {
                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlExplicitOperation).booleanValue()) 
                                                                                                                                                                                        visitExplicitOperation((IOmlExplicitOperation) pNode);
                                                                                                                                                                                      else {
                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlAssignmentDefinition).booleanValue()) 
                                                                                                                                                                                          visitAssignmentDefinition((IOmlAssignmentDefinition) pNode);
                                                                                                                                                                                        else {
                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlSameclassExpression).booleanValue()) 
                                                                                                                                                                                            visitSameclassExpression((IOmlSameclassExpression) pNode);
                                                                                                                                                                                          else {
                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlExitStatement).booleanValue()) 
                                                                                                                                                                                              visitExitStatement((IOmlExitStatement) pNode);
                                                                                                                                                                                            else {
                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlExistsExpression).booleanValue()) 
                                                                                                                                                                                                visitExistsExpression((IOmlExistsExpression) pNode);
                                                                                                                                                                                              else {
                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlParameter).booleanValue()) 
                                                                                                                                                                                                  visitParameter((IOmlParameter) pNode);
                                                                                                                                                                                                else {
                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlFunctionTypeInstantiation).booleanValue()) 
                                                                                                                                                                                                    visitFunctionTypeInstantiation((IOmlFunctionTypeInstantiation) pNode);
                                                                                                                                                                                                  else {
                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlObjectApply).booleanValue()) 
                                                                                                                                                                                                      visitObjectApply((IOmlObjectApply) pNode);
                                                                                                                                                                                                    else {
                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlSequenceEnumeration).booleanValue()) 
                                                                                                                                                                                                        visitSequenceEnumeration((IOmlSequenceEnumeration) pNode);
                                                                                                                                                                                                      else {
                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlSetUnionPattern).booleanValue()) 
                                                                                                                                                                                                          visitSetUnionPattern((IOmlSetUnionPattern) pNode);
                                                                                                                                                                                                        else {
                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlTraceOneOrMore).booleanValue()) 
                                                                                                                                                                                                            visitTraceOneOrMore((IOmlTraceOneOrMore) pNode);
                                                                                                                                                                                                          else {
                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlStartStatement).booleanValue()) 
                                                                                                                                                                                                              visitStartStatement((IOmlStartStatement) pNode);
                                                                                                                                                                                                            else {
                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlError).booleanValue()) 
                                                                                                                                                                                                                visitError((IOmlError) pNode);
                                                                                                                                                                                                              else {
                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlFunctionShape).booleanValue()) 
                                                                                                                                                                                                                  visitFunctionShape((IOmlFunctionShape) pNode);
                                                                                                                                                                                                                else {
                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlIfStatement).booleanValue()) 
                                                                                                                                                                                                                    visitIfStatement((IOmlIfStatement) pNode);
                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlLetBeExpression).booleanValue()) 
                                                                                                                                                                                                                      visitLetBeExpression((IOmlLetBeExpression) pNode);
                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlTotalFunctionType).booleanValue()) 
                                                                                                                                                                                                                        visitTotalFunctionType((IOmlTotalFunctionType) pNode);
                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlNilLiteral).booleanValue()) 
                                                                                                                                                                                                                          visitNilLiteral((IOmlNilLiteral) pNode);
                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlSporadicThread).booleanValue()) 
                                                                                                                                                                                                                            visitSporadicThread((IOmlSporadicThread) pNode);
                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlBind).booleanValue()) 
                                                                                                                                                                                                                              visitBind((IOmlBind) pNode);
                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlMapComprehension).booleanValue()) 
                                                                                                                                                                                                                                visitMapComprehension((IOmlMapComprehension) pNode);
                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlFunctionDefinition).booleanValue()) 
                                                                                                                                                                                                                                  visitFunctionDefinition((IOmlFunctionDefinition) pNode);
                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlRecordConstructor).booleanValue()) 
                                                                                                                                                                                                                                    visitRecordConstructor((IOmlRecordConstructor) pNode);
                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlBoolType).booleanValue()) 
                                                                                                                                                                                                                                      visitBoolType((IOmlBoolType) pNode);
                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlSetBind).booleanValue()) 
                                                                                                                                                                                                                                        visitSetBind((IOmlSetBind) pNode);
                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlNondeterministicStatement).booleanValue()) 
                                                                                                                                                                                                                                          visitNondeterministicStatement((IOmlNondeterministicStatement) pNode);
                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlInstanceVariable).booleanValue()) 
                                                                                                                                                                                                                                            visitInstanceVariable((IOmlInstanceVariable) pNode);
                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlLetExpression).booleanValue()) 
                                                                                                                                                                                                                                              visitLetExpression((IOmlLetExpression) pNode);
                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlPatternIdentifier).booleanValue()) 
                                                                                                                                                                                                                                                visitPatternIdentifier((IOmlPatternIdentifier) pNode);
                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlTupleConstructor).booleanValue()) 
                                                                                                                                                                                                                                                  visitTupleConstructor((IOmlTupleConstructor) pNode);
                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlSymbolicLiteralPattern).booleanValue()) 
                                                                                                                                                                                                                                                    visitSymbolicLiteralPattern((IOmlSymbolicLiteralPattern) pNode);
                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlOptionalType).booleanValue()) 
                                                                                                                                                                                                                                                      visitOptionalType((IOmlOptionalType) pNode);
                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlTraceZeroOrMore).booleanValue()) 
                                                                                                                                                                                                                                                        visitTraceZeroOrMore((IOmlTraceZeroOrMore) pNode);
                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlMutexAllPredicate).booleanValue()) 
                                                                                                                                                                                                                                                          visitMutexAllPredicate((IOmlMutexAllPredicate) pNode);
                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlAccessDefinition).booleanValue()) 
                                                                                                                                                                                                                                                            visitAccessDefinition((IOmlAccessDefinition) pNode);
                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlPatternBind).booleanValue()) 
                                                                                                                                                                                                                                                              visitPatternBind((IOmlPatternBind) pNode);
                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlSequenceComprehension).booleanValue()) 
                                                                                                                                                                                                                                                                visitSequenceComprehension((IOmlSequenceComprehension) pNode);
                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlEqualsDefinition).booleanValue()) 
                                                                                                                                                                                                                                                                  visitEqualsDefinition((IOmlEqualsDefinition) pNode);
                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlMaplet).booleanValue()) 
                                                                                                                                                                                                                                                                    visitMaplet((IOmlMaplet) pNode);
                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlExistsUniqueExpression).booleanValue()) 
                                                                                                                                                                                                                                                                      visitExistsUniqueExpression((IOmlExistsUniqueExpression) pNode);
                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlThreadIdExpression).booleanValue()) 
                                                                                                                                                                                                                                                                        visitThreadIdExpression((IOmlThreadIdExpression) pNode);
                                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlExtendedExplicitOperation).booleanValue()) 
                                                                                                                                                                                                                                                                          visitExtendedExplicitOperation((IOmlExtendedExplicitOperation) pNode);
                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlSetComprehension).booleanValue()) 
                                                                                                                                                                                                                                                                            visitSetComprehension((IOmlSetComprehension) pNode);
                                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlIotaExpression).booleanValue()) 
                                                                                                                                                                                                                                                                              visitIotaExpression((IOmlIotaExpression) pNode);
                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlReturnStatement).booleanValue()) 
                                                                                                                                                                                                                                                                                visitReturnStatement((IOmlReturnStatement) pNode);
                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlTraceZeroOrOne).booleanValue()) 
                                                                                                                                                                                                                                                                                  visitTraceZeroOrOne((IOmlTraceZeroOrOne) pNode);
                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlSetEnumPattern).booleanValue()) 
                                                                                                                                                                                                                                                                                    visitSetEnumPattern((IOmlSetEnumPattern) pNode);
                                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlTrapStatement).booleanValue()) 
                                                                                                                                                                                                                                                                                      visitTrapStatement((IOmlTrapStatement) pNode);
                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlFunctionDefinitions).booleanValue()) 
                                                                                                                                                                                                                                                                                        visitFunctionDefinitions((IOmlFunctionDefinitions) pNode);
                                                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlFieldSelect).booleanValue()) 
                                                                                                                                                                                                                                                                                          visitFieldSelect((IOmlFieldSelect) pNode);
                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlFunctionTypeSelect).booleanValue()) 
                                                                                                                                                                                                                                                                                            visitFunctionTypeSelect((IOmlFunctionTypeSelect) pNode);
                                                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlSeq1Type).booleanValue()) 
                                                                                                                                                                                                                                                                                              visitSeq1Type((IOmlSeq1Type) pNode);
                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlOperationBody).booleanValue()) 
                                                                                                                                                                                                                                                                                                visitOperationBody((IOmlOperationBody) pNode);
                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlClassTypeInstantiation).booleanValue()) 
                                                                                                                                                                                                                                                                                                  visitClassTypeInstantiation((IOmlClassTypeInstantiation) pNode);
                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlApplyExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                    visitApplyExpression((IOmlApplyExpression) pNode);
                                                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlCyclesStatement).booleanValue()) 
                                                                                                                                                                                                                                                                                                      visitCyclesStatement((IOmlCyclesStatement) pNode);
                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlValueShape).booleanValue()) 
                                                                                                                                                                                                                                                                                                        visitValueShape((IOmlValueShape) pNode);
                                                                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlTraceRepeatPattern).booleanValue()) 
                                                                                                                                                                                                                                                                                                          visitTraceRepeatPattern((IOmlTraceRepeatPattern) pNode);
                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlOperationDefinitions).booleanValue()) 
                                                                                                                                                                                                                                                                                                            visitOperationDefinitions((IOmlOperationDefinitions) pNode);
                                                                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlExplicitFunction).booleanValue()) 
                                                                                                                                                                                                                                                                                                              visitExplicitFunction((IOmlExplicitFunction) pNode);
                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlPreconditionExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                visitPreconditionExpression((IOmlPreconditionExpression) pNode);
                                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlTraceLetBeBinding).booleanValue()) 
                                                                                                                                                                                                                                                                                                                  visitTraceLetBeBinding((IOmlTraceLetBeBinding) pNode);
                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlQuoteLiteral).booleanValue()) 
                                                                                                                                                                                                                                                                                                                    visitQuoteLiteral((IOmlQuoteLiteral) pNode);
                                                                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlVarInformation).booleanValue()) 
                                                                                                                                                                                                                                                                                                                      visitVarInformation((IOmlVarInformation) pNode);
                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlIsofbaseclassExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                        visitIsofbaseclassExpression((IOmlIsofbaseclassExpression) pNode);
                                                                                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlLetStatement).booleanValue()) 
                                                                                                                                                                                                                                                                                                                          visitLetStatement((IOmlLetStatement) pNode);
                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlActExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                            visitActExpression((IOmlActExpression) pNode);
                                                                                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlExceptions).booleanValue()) 
                                                                                                                                                                                                                                                                                                                              visitExceptions((IOmlExceptions) pNode);
                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlIsExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                visitIsExpression((IOmlIsExpression) pNode);
                                                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlBinaryOperator).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                  visitBinaryOperator((IOmlBinaryOperator) pNode);
                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlTraceDefinitions).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                    visitTraceDefinitions((IOmlTraceDefinitions) pNode);
                                                                                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlValueDefinition).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                      visitValueDefinition((IOmlValueDefinition) pNode);
                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlCasesExpressionAlternative).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                        visitCasesExpressionAlternative((IOmlCasesExpressionAlternative) pNode);
                                                                                                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlLetBeStatement).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                          visitLetBeStatement((IOmlLetBeStatement) pNode);
                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlMutexPredicate).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                            visitMutexPredicate((IOmlMutexPredicate) pNode);
                                                                                                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlUndefinedExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                              visitUndefinedExpression((IOmlUndefinedExpression) pNode);
                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlSetEnumeration).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                visitSetEnumeration((IOmlSetEnumeration) pNode);
                                                                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlCharacterLiteral).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                  visitCharacterLiteral((IOmlCharacterLiteral) pNode);
                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlAssignStatement).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                    visitAssignStatement((IOmlAssignStatement) pNode);
                                                                                                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlProductType).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                      visitProductType((IOmlProductType) pNode);
                                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlSequenceForLoop).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                        visitSequenceForLoop((IOmlSequenceForLoop) pNode);
                                                                                                                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlInstanceVariableDefinitions).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                          visitInstanceVariableDefinitions((IOmlInstanceVariableDefinitions) pNode);
                                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlRealType).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                            visitRealType((IOmlRealType) pNode);
                                                                                                                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlCharType).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                              visitCharType((IOmlCharType) pNode);
                                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlTraceMethodApply).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                visitTraceMethodApply((IOmlTraceMethodApply) pNode);
                                                                                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlWaitingExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                  visitWaitingExpression((IOmlWaitingExpression) pNode);
                                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlInvariant).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                    visitInvariant((IOmlInvariant) pNode);
                                                                                                                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlObjectFieldReference).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                      visitObjectFieldReference((IOmlObjectFieldReference) pNode);
                                                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlUnaryOperator).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                        visitUnaryOperator((IOmlUnaryOperator) pNode);
                                                                                                                                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlTypeShape).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                          visitTypeShape((IOmlTypeShape) pNode);
                                                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlEmptyType).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                            visitEmptyType((IOmlEmptyType) pNode);
                                                                                                                                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlBracketedType).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                              visitBracketedType((IOmlBracketedType) pNode);
                                                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlFinExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                visitFinExpression((IOmlFinExpression) pNode);
                                                                                                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlSetRangeExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                  visitSetRangeExpression((IOmlSetRangeExpression) pNode);
                                                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlSimpleType).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                    visitSimpleType((IOmlSimpleType) pNode);
                                                                                                                                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlTokenExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                      visitTokenExpression((IOmlTokenExpression) pNode);
                                                                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlBracketedExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                        visitBracketedExpression((IOmlBracketedExpression) pNode);
                                                                                                                                                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlType).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                          visitType((IOmlType) pNode);
                                                                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlFunctionBody).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                            visitFunctionBody((IOmlFunctionBody) pNode);
                                                                                                                                                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlPartialFunctionType).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                              visitPartialFunctionType((IOmlPartialFunctionType) pNode);
                                                                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlLambdaExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                visitLambdaExpression((IOmlLambdaExpression) pNode);
                                                                                                                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlInstanceVariableInvariant).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                  visitInstanceVariableInvariant((IOmlInstanceVariableInvariant) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlInheritanceClause).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                    visitInheritanceClause((IOmlInheritanceClause) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlSeqEnumPattern).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                      visitSeqEnumPattern((IOmlSeqEnumPattern) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlDontCarePattern).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                        visitDontCarePattern((IOmlDontCarePattern) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlUnionType).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                          visitUnionType((IOmlUnionType) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlTraceDefinitionItem).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                            visitTraceDefinitionItem((IOmlTraceDefinitionItem) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlOperationShape).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                              visitOperationShape((IOmlOperationShape) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlTypelessExplicitFunction).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                visitTypelessExplicitFunction((IOmlTypelessExplicitFunction) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlThreadDefinition).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                  visitThreadDefinition((IOmlThreadDefinition) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlAlwaysStatement).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                    visitAlwaysStatement((IOmlAlwaysStatement) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlRecordPattern).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                      visitRecordPattern((IOmlRecordPattern) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlQuoteType).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                        visitQuoteType((IOmlQuoteType) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlDclStatement).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                          visitDclStatement((IOmlDclStatement) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlObjectDesignator).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                            visitObjectDesignator((IOmlObjectDesignator) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlPatternTypePair).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                              visitPatternTypePair((IOmlPatternTypePair) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlBinaryExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                                visitBinaryExpression((IOmlBinaryExpression) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlMapOrSequenceReference).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                                  visitMapOrSequenceReference((IOmlMapOrSequenceReference) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlElseIfExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                                    visitElseIfExpression((IOmlElseIfExpression) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlName).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                                      visitName((IOmlName) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlNat1Type).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                                        visitNat1Type((IOmlNat1Type) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                                      else {
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (new Boolean(pNode instanceof IOmlStateDesignator).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                                          visitStateDesignator((IOmlStateDesignator) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                                                                                                                          if (new Boolean(pNode instanceof IOmlSynchronizationDefinitions).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                                            visitSynchronizationDefinitions((IOmlSynchronizationDefinitions) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                                          else {
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (new Boolean(pNode instanceof IOmlFunctionTrailer).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                                              visitFunctionTrailer((IOmlFunctionTrailer) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (new Boolean(pNode instanceof IOmlMuExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                                                visitMuExpression((IOmlMuExpression) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (new Boolean(pNode instanceof IOmlTimeExpression).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                                                  visitTimeExpression((IOmlTimeExpression) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  if (new Boolean(pNode instanceof IOmlRatType).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                                                    visitRatType((IOmlRatType) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                                                  else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    if (new Boolean(pNode instanceof IOmlExtendedExplicitFunction).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                                                      visitExtendedExplicitFunction((IOmlExtendedExplicitFunction) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                                                    else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                      if (new Boolean(pNode instanceof IOmlStateDesignatorName).booleanValue()) 
                                                                                                                                                                                                                                                                                                                                                                                                                                                        visitStateDesignatorName((IOmlStateDesignatorName) pNode);
                                                                                                                                                                                                                                                                                                                                                                                                                                                      else {

                                                                                                                                                                                                                                                                                                                                                                                                                                                        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                                                                                                                                                                                                                                                                                                                                                                                                                                                        return;
                                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                            }
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitNode


// ***** VDMTOOLS START Name=visitType KEEP=NO
  public void visitType (final IOmlType pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlSeq1Type).booleanValue()) 
      visitSeq1Type((IOmlSeq1Type) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlPartialFunctionType).booleanValue()) 
        visitPartialFunctionType((IOmlPartialFunctionType) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlClassTypeInstantiation).booleanValue()) 
          visitClassTypeInstantiation((IOmlClassTypeInstantiation) pNode);
        else {
          if (new Boolean(pNode instanceof IOmlTokenType).booleanValue()) 
            visitTokenType((IOmlTokenType) pNode);
          else {
            if (new Boolean(pNode instanceof IOmlTypeName).booleanValue()) 
              visitTypeName((IOmlTypeName) pNode);
            else {
              if (new Boolean(pNode instanceof IOmlUnionType).booleanValue()) 
                visitUnionType((IOmlUnionType) pNode);
              else {
                if (new Boolean(pNode instanceof IOmlBoolType).booleanValue()) 
                  visitBoolType((IOmlBoolType) pNode);
                else {
                  if (new Boolean(pNode instanceof IOmlProductType).booleanValue()) 
                    visitProductType((IOmlProductType) pNode);
                  else {
                    if (new Boolean(pNode instanceof IOmlQuoteType).booleanValue()) 
                      visitQuoteType((IOmlQuoteType) pNode);
                    else {
                      if (new Boolean(pNode instanceof IOmlIntType).booleanValue()) 
                        visitIntType((IOmlIntType) pNode);
                      else {
                        if (new Boolean(pNode instanceof IOmlNatType).booleanValue()) 
                          visitNatType((IOmlNatType) pNode);
                        else {
                          if (new Boolean(pNode instanceof IOmlRealType).booleanValue()) 
                            visitRealType((IOmlRealType) pNode);
                          else {
                            if (new Boolean(pNode instanceof IOmlCharType).booleanValue()) 
                              visitCharType((IOmlCharType) pNode);
                            else {
                              if (new Boolean(pNode instanceof IOmlSeq0Type).booleanValue()) 
                                visitSeq0Type((IOmlSeq0Type) pNode);
                              else {
                                if (new Boolean(pNode instanceof IOmlOptionalType).booleanValue()) 
                                  visitOptionalType((IOmlOptionalType) pNode);
                                else {
                                  if (new Boolean(pNode instanceof IOmlSetType).booleanValue()) 
                                    visitSetType((IOmlSetType) pNode);
                                  else {
                                    if (new Boolean(pNode instanceof IOmlGeneralMapType).booleanValue()) 
                                      visitGeneralMapType((IOmlGeneralMapType) pNode);
                                    else {
                                      if (new Boolean(pNode instanceof IOmlCompositeType).booleanValue()) 
                                        visitCompositeType((IOmlCompositeType) pNode);
                                      else {
                                        if (new Boolean(pNode instanceof IOmlTypeVariable).booleanValue()) 
                                          visitTypeVariable((IOmlTypeVariable) pNode);
                                        else {
                                          if (new Boolean(pNode instanceof IOmlNat1Type).booleanValue()) 
                                            visitNat1Type((IOmlNat1Type) pNode);
                                          else {
                                            if (new Boolean(pNode instanceof IOmlTotalFunctionType).booleanValue()) 
                                              visitTotalFunctionType((IOmlTotalFunctionType) pNode);
                                            else {
                                              if (new Boolean(pNode instanceof IOmlRatType).booleanValue()) 
                                                visitRatType((IOmlRatType) pNode);
                                              else {
                                                if (new Boolean(pNode instanceof IOmlEmptyType).booleanValue()) 
                                                  visitEmptyType((IOmlEmptyType) pNode);
                                                else {
                                                  if (new Boolean(pNode instanceof IOmlBracketedType).booleanValue()) 
                                                    visitBracketedType((IOmlBracketedType) pNode);
                                                  else {
                                                    if (new Boolean(pNode instanceof IOmlOperationType).booleanValue()) 
                                                      visitOperationType((IOmlOperationType) pNode);
                                                    else {
                                                      if (new Boolean(pNode instanceof IOmlInjectiveMapType).booleanValue()) 
                                                        visitInjectiveMapType((IOmlInjectiveMapType) pNode);
                                                      else {

                                                        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                                                        return;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitType


// ***** VDMTOOLS START Name=visitStatement KEEP=NO
  public void visitStatement (final IOmlStatement pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlCyclesStatement).booleanValue()) 
      visitCyclesStatement((IOmlCyclesStatement) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlAlwaysStatement).booleanValue()) 
        visitAlwaysStatement((IOmlAlwaysStatement) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlAssignStatement).booleanValue()) 
          visitAssignStatement((IOmlAssignStatement) pNode);
        else {
          if (new Boolean(pNode instanceof IOmlCasesStatement).booleanValue()) 
            visitCasesStatement((IOmlCasesStatement) pNode);
          else {
            if (new Boolean(pNode instanceof IOmlNondeterministicStatement).booleanValue()) 
              visitNondeterministicStatement((IOmlNondeterministicStatement) pNode);
            else {
              if (new Boolean(pNode instanceof IOmlExitStatement).booleanValue()) 
                visitExitStatement((IOmlExitStatement) pNode);
              else {
                if (new Boolean(pNode instanceof IOmlDclStatement).booleanValue()) 
                  visitDclStatement((IOmlDclStatement) pNode);
                else {
                  if (new Boolean(pNode instanceof IOmlRecursiveTrapStatement).booleanValue()) 
                    visitRecursiveTrapStatement((IOmlRecursiveTrapStatement) pNode);
                  else {
                    if (new Boolean(pNode instanceof IOmlSkipStatement).booleanValue()) 
                      visitSkipStatement((IOmlSkipStatement) pNode);
                    else {
                      if (new Boolean(pNode instanceof IOmlSequenceForLoop).booleanValue()) 
                        visitSequenceForLoop((IOmlSequenceForLoop) pNode);
                      else {
                        if (new Boolean(pNode instanceof IOmlErrorStatement).booleanValue()) 
                          visitErrorStatement((IOmlErrorStatement) pNode);
                        else {
                          if (new Boolean(pNode instanceof IOmlCallStatement).booleanValue()) 
                            visitCallStatement((IOmlCallStatement) pNode);
                          else {
                            if (new Boolean(pNode instanceof IOmlWhileLoop).booleanValue()) 
                              visitWhileLoop((IOmlWhileLoop) pNode);
                            else {
                              if (new Boolean(pNode instanceof IOmlIndexForLoop).booleanValue()) 
                                visitIndexForLoop((IOmlIndexForLoop) pNode);
                              else {
                                if (new Boolean(pNode instanceof IOmlDefStatement).booleanValue()) 
                                  visitDefStatement((IOmlDefStatement) pNode);
                                else {
                                  if (new Boolean(pNode instanceof IOmlLetStatement).booleanValue()) 
                                    visitLetStatement((IOmlLetStatement) pNode);
                                  else {
                                    if (new Boolean(pNode instanceof IOmlSetForLoop).booleanValue()) 
                                      visitSetForLoop((IOmlSetForLoop) pNode);
                                    else {
                                      if (new Boolean(pNode instanceof IOmlStartStatement).booleanValue()) 
                                        visitStartStatement((IOmlStartStatement) pNode);
                                      else {
                                        if (new Boolean(pNode instanceof IOmlDurationStatement).booleanValue()) 
                                          visitDurationStatement((IOmlDurationStatement) pNode);
                                        else {
                                          if (new Boolean(pNode instanceof IOmlAtomicStatement).booleanValue()) 
                                            visitAtomicStatement((IOmlAtomicStatement) pNode);
                                          else {
                                            if (new Boolean(pNode instanceof IOmlSpecificationStatement).booleanValue()) 
                                              visitSpecificationStatement((IOmlSpecificationStatement) pNode);
                                            else {
                                              if (new Boolean(pNode instanceof IOmlReturnStatement).booleanValue()) 
                                                visitReturnStatement((IOmlReturnStatement) pNode);
                                              else {
                                                if (new Boolean(pNode instanceof IOmlIfStatement).booleanValue()) 
                                                  visitIfStatement((IOmlIfStatement) pNode);
                                                else {
                                                  if (new Boolean(pNode instanceof IOmlBlockStatement).booleanValue()) 
                                                    visitBlockStatement((IOmlBlockStatement) pNode);
                                                  else {
                                                    if (new Boolean(pNode instanceof IOmlTrapStatement).booleanValue()) 
                                                      visitTrapStatement((IOmlTrapStatement) pNode);
                                                    else {
                                                      if (new Boolean(pNode instanceof IOmlLetBeStatement).booleanValue()) 
                                                        visitLetBeStatement((IOmlLetBeStatement) pNode);
                                                      else {

                                                        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                                                        return;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitStatement


// ***** VDMTOOLS START Name=visitThreadSpecification KEEP=NO
  public void visitThreadSpecification (final IOmlThreadSpecification pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlPeriodicThread).booleanValue()) 
      visitPeriodicThread((IOmlPeriodicThread) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlSporadicThread).booleanValue()) 
        visitSporadicThread((IOmlSporadicThread) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlProcedureThread).booleanValue()) 
          visitProcedureThread((IOmlProcedureThread) pNode);
        else {

          UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
          return;
        }
      }
  }
// ***** VDMTOOLS END Name=visitThreadSpecification


// ***** VDMTOOLS START Name=visitBind KEEP=NO
  public void visitBind (final IOmlBind pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlSetBind).booleanValue()) 
      visitSetBind((IOmlSetBind) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlTypeBind).booleanValue()) 
        visitTypeBind((IOmlTypeBind) pNode);
      else {

        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
        return;
      }
  }
// ***** VDMTOOLS END Name=visitBind


// ***** VDMTOOLS START Name=visitOperationShape KEEP=NO
  public void visitOperationShape (final IOmlOperationShape pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlExtendedExplicitOperation).booleanValue()) 
      visitExtendedExplicitOperation((IOmlExtendedExplicitOperation) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlExplicitOperation).booleanValue()) 
        visitExplicitOperation((IOmlExplicitOperation) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlImplicitOperation).booleanValue()) 
          visitImplicitOperation((IOmlImplicitOperation) pNode);
        else {

          UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
          return;
        }
      }
  }
// ***** VDMTOOLS END Name=visitOperationShape


// ***** VDMTOOLS START Name=visitTraceCoreDefinition KEEP=NO
  public void visitTraceCoreDefinition (final IOmlTraceCoreDefinition pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlTraceBracketedDefinition).booleanValue()) 
      visitTraceBracketedDefinition((IOmlTraceBracketedDefinition) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlTraceMethodApply).booleanValue()) 
        visitTraceMethodApply((IOmlTraceMethodApply) pNode);
      else {

        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
        return;
      }
  }
// ***** VDMTOOLS END Name=visitTraceCoreDefinition


// ***** VDMTOOLS START Name=visitTraceRepeatPattern KEEP=NO
  public void visitTraceRepeatPattern (final IOmlTraceRepeatPattern pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlTraceZeroOrOne).booleanValue()) 
      visitTraceZeroOrOne((IOmlTraceZeroOrOne) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlTraceZeroOrMore).booleanValue()) 
        visitTraceZeroOrMore((IOmlTraceZeroOrMore) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlTraceOneOrMore).booleanValue()) 
          visitTraceOneOrMore((IOmlTraceOneOrMore) pNode);
        else {
          if (new Boolean(pNode instanceof IOmlTraceRange).booleanValue()) 
            visitTraceRange((IOmlTraceRange) pNode);
          else {

            UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
            return;
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitTraceRepeatPattern


// ***** VDMTOOLS START Name=visitInstanceVariableShape KEEP=NO
  public void visitInstanceVariableShape (final IOmlInstanceVariableShape pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlInstanceVariableInvariant).booleanValue()) 
      visitInstanceVariableInvariant((IOmlInstanceVariableInvariant) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlInstanceVariable).booleanValue()) 
        visitInstanceVariable((IOmlInstanceVariable) pNode);
      else {

        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
        return;
      }
  }
// ***** VDMTOOLS END Name=visitInstanceVariableShape


// ***** VDMTOOLS START Name=visitExpression KEEP=NO
  public void visitExpression (final IOmlExpression pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlFunctionTypeSelect).booleanValue()) 
      visitFunctionTypeSelect((IOmlFunctionTypeSelect) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlTokenExpression).booleanValue()) 
        visitTokenExpression((IOmlTokenExpression) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlUndefinedExpression).booleanValue()) 
          visitUndefinedExpression((IOmlUndefinedExpression) pNode);
        else {
          if (new Boolean(pNode instanceof IOmlBracketedExpression).booleanValue()) 
            visitBracketedExpression((IOmlBracketedExpression) pNode);
          else {
            if (new Boolean(pNode instanceof IOmlActiveExpression).booleanValue()) 
              visitActiveExpression((IOmlActiveExpression) pNode);
            else {
              if (new Boolean(pNode instanceof IOmlForAllExpression).booleanValue()) 
                visitForAllExpression((IOmlForAllExpression) pNode);
              else {
                if (new Boolean(pNode instanceof IOmlLambdaExpression).booleanValue()) 
                  visitLambdaExpression((IOmlLambdaExpression) pNode);
                else {
                  if (new Boolean(pNode instanceof IOmlSetEnumeration).booleanValue()) 
                    visitSetEnumeration((IOmlSetEnumeration) pNode);
                  else {
                    if (new Boolean(pNode instanceof IOmlMapComprehension).booleanValue()) 
                      visitMapComprehension((IOmlMapComprehension) pNode);
                    else {
                      if (new Boolean(pNode instanceof IOmlApplyExpression).booleanValue()) 
                        visitApplyExpression((IOmlApplyExpression) pNode);
                      else {
                        if (new Boolean(pNode instanceof IOmlCasesExpression).booleanValue()) 
                          visitCasesExpression((IOmlCasesExpression) pNode);
                        else {
                          if (new Boolean(pNode instanceof IOmlRecordConstructor).booleanValue()) 
                            visitRecordConstructor((IOmlRecordConstructor) pNode);
                          else {
                            if (new Boolean(pNode instanceof IOmlIfExpression).booleanValue()) 
                              visitIfExpression((IOmlIfExpression) pNode);
                            else {
                              if (new Boolean(pNode instanceof IOmlOldName).booleanValue()) 
                                visitOldName((IOmlOldName) pNode);
                              else {
                                if (new Boolean(pNode instanceof IOmlPreconditionExpression).booleanValue()) 
                                  visitPreconditionExpression((IOmlPreconditionExpression) pNode);
                                else {
                                  if (new Boolean(pNode instanceof IOmlSameclassExpression).booleanValue()) 
                                    visitSameclassExpression((IOmlSameclassExpression) pNode);
                                  else {
                                    if (new Boolean(pNode instanceof IOmlSelfExpression).booleanValue()) 
                                      visitSelfExpression((IOmlSelfExpression) pNode);
                                    else {
                                      if (new Boolean(pNode instanceof IOmlExistsExpression).booleanValue()) 
                                        visitExistsExpression((IOmlExistsExpression) pNode);
                                      else {
                                        if (new Boolean(pNode instanceof IOmlSamebaseclassExpression).booleanValue()) 
                                          visitSamebaseclassExpression((IOmlSamebaseclassExpression) pNode);
                                        else {
                                          if (new Boolean(pNode instanceof IOmlFunctionTypeInstantiation).booleanValue()) 
                                            visitFunctionTypeInstantiation((IOmlFunctionTypeInstantiation) pNode);
                                          else {
                                            if (new Boolean(pNode instanceof IOmlIsofclassExpression).booleanValue()) 
                                              visitIsofclassExpression((IOmlIsofclassExpression) pNode);
                                            else {
                                              if (new Boolean(pNode instanceof IOmlSequenceEnumeration).booleanValue()) 
                                                visitSequenceEnumeration((IOmlSequenceEnumeration) pNode);
                                              else {
                                                if (new Boolean(pNode instanceof IOmlLetExpression).booleanValue()) 
                                                  visitLetExpression((IOmlLetExpression) pNode);
                                                else {
                                                  if (new Boolean(pNode instanceof IOmlBinaryExpression).booleanValue()) 
                                                    visitBinaryExpression((IOmlBinaryExpression) pNode);
                                                  else {
                                                    if (new Boolean(pNode instanceof IOmlTupleConstructor).booleanValue()) 
                                                      visitTupleConstructor((IOmlTupleConstructor) pNode);
                                                    else {
                                                      if (new Boolean(pNode instanceof IOmlIsofbaseclassExpression).booleanValue()) 
                                                        visitIsofbaseclassExpression((IOmlIsofbaseclassExpression) pNode);
                                                      else {
                                                        if (new Boolean(pNode instanceof IOmlSymbolicLiteralExpression).booleanValue()) 
                                                          visitSymbolicLiteralExpression((IOmlSymbolicLiteralExpression) pNode);
                                                        else {
                                                          if (new Boolean(pNode instanceof IOmlSubsequenceExpression).booleanValue()) 
                                                            visitSubsequenceExpression((IOmlSubsequenceExpression) pNode);
                                                          else {
                                                            if (new Boolean(pNode instanceof IOmlReqExpression).booleanValue()) 
                                                              visitReqExpression((IOmlReqExpression) pNode);
                                                            else {
                                                              if (new Boolean(pNode instanceof IOmlSequenceComprehension).booleanValue()) 
                                                                visitSequenceComprehension((IOmlSequenceComprehension) pNode);
                                                              else {
                                                                if (new Boolean(pNode instanceof IOmlExistsUniqueExpression).booleanValue()) 
                                                                  visitExistsUniqueExpression((IOmlExistsUniqueExpression) pNode);
                                                                else {
                                                                  if (new Boolean(pNode instanceof IOmlThreadIdExpression).booleanValue()) 
                                                                    visitThreadIdExpression((IOmlThreadIdExpression) pNode);
                                                                  else {
                                                                    if (new Boolean(pNode instanceof IOmlDefExpression).booleanValue()) 
                                                                      visitDefExpression((IOmlDefExpression) pNode);
                                                                    else {
                                                                      if (new Boolean(pNode instanceof IOmlActExpression).booleanValue()) 
                                                                        visitActExpression((IOmlActExpression) pNode);
                                                                      else {
                                                                        if (new Boolean(pNode instanceof IOmlName).booleanValue()) 
                                                                          visitName((IOmlName) pNode);
                                                                        else {
                                                                          if (new Boolean(pNode instanceof IOmlSetComprehension).booleanValue()) 
                                                                            visitSetComprehension((IOmlSetComprehension) pNode);
                                                                          else {
                                                                            if (new Boolean(pNode instanceof IOmlIotaExpression).booleanValue()) 
                                                                              visitIotaExpression((IOmlIotaExpression) pNode);
                                                                            else {
                                                                              if (new Boolean(pNode instanceof IOmlMapEnumeration).booleanValue()) 
                                                                                visitMapEnumeration((IOmlMapEnumeration) pNode);
                                                                              else {
                                                                                if (new Boolean(pNode instanceof IOmlNewExpression).booleanValue()) 
                                                                                  visitNewExpression((IOmlNewExpression) pNode);
                                                                                else {
                                                                                  if (new Boolean(pNode instanceof IOmlIsExpression).booleanValue()) 
                                                                                    visitIsExpression((IOmlIsExpression) pNode);
                                                                                  else {
                                                                                    if (new Boolean(pNode instanceof IOmlWaitingExpression).booleanValue()) 
                                                                                      visitWaitingExpression((IOmlWaitingExpression) pNode);
                                                                                    else {
                                                                                      if (new Boolean(pNode instanceof IOmlLetBeExpression).booleanValue()) 
                                                                                        visitLetBeExpression((IOmlLetBeExpression) pNode);
                                                                                      else {
                                                                                        if (new Boolean(pNode instanceof IOmlMuExpression).booleanValue()) 
                                                                                          visitMuExpression((IOmlMuExpression) pNode);
                                                                                        else {
                                                                                          if (new Boolean(pNode instanceof IOmlFieldSelect).booleanValue()) 
                                                                                            visitFieldSelect((IOmlFieldSelect) pNode);
                                                                                          else {
                                                                                            if (new Boolean(pNode instanceof IOmlUnaryExpression).booleanValue()) 
                                                                                              visitUnaryExpression((IOmlUnaryExpression) pNode);
                                                                                            else {
                                                                                              if (new Boolean(pNode instanceof IOmlTimeExpression).booleanValue()) 
                                                                                                visitTimeExpression((IOmlTimeExpression) pNode);
                                                                                              else {
                                                                                                if (new Boolean(pNode instanceof IOmlFinExpression).booleanValue()) 
                                                                                                  visitFinExpression((IOmlFinExpression) pNode);
                                                                                                else {
                                                                                                  if (new Boolean(pNode instanceof IOmlSetRangeExpression).booleanValue()) 
                                                                                                    visitSetRangeExpression((IOmlSetRangeExpression) pNode);
                                                                                                  else {

                                                                                                    UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                                                                                                    return;
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitExpression


// ***** VDMTOOLS START Name=visitObjectDesignator KEEP=NO
  public void visitObjectDesignator (final IOmlObjectDesignator pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlObjectApply).booleanValue()) 
      visitObjectApply((IOmlObjectApply) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlObjectDesignatorExpression).booleanValue()) 
        visitObjectDesignatorExpression((IOmlObjectDesignatorExpression) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlObjectFieldReference).booleanValue()) 
          visitObjectFieldReference((IOmlObjectFieldReference) pNode);
        else {

          UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
          return;
        }
      }
  }
// ***** VDMTOOLS END Name=visitObjectDesignator


// ***** VDMTOOLS START Name=visitScope KEEP=NO
  public void visitScope (final IOmlScope var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitScope


// ***** VDMTOOLS START Name=visitLiteral KEEP=NO
  public void visitLiteral (final IOmlLiteral pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlNumericLiteral).booleanValue()) 
      visitNumericLiteral((IOmlNumericLiteral) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlRealLiteral).booleanValue()) 
        visitRealLiteral((IOmlRealLiteral) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlTextLiteral).booleanValue()) 
          visitTextLiteral((IOmlTextLiteral) pNode);
        else {
          if (new Boolean(pNode instanceof IOmlNilLiteral).booleanValue()) 
            visitNilLiteral((IOmlNilLiteral) pNode);
          else {
            if (new Boolean(pNode instanceof IOmlCharacterLiteral).booleanValue()) 
              visitCharacterLiteral((IOmlCharacterLiteral) pNode);
            else {
              if (new Boolean(pNode instanceof IOmlBooleanLiteral).booleanValue()) 
                visitBooleanLiteral((IOmlBooleanLiteral) pNode);
              else {
                if (new Boolean(pNode instanceof IOmlQuoteLiteral).booleanValue()) 
                  visitQuoteLiteral((IOmlQuoteLiteral) pNode);
                else {

                  UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                  return;
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitLiteral


// ***** VDMTOOLS START Name=visitTraceDefinition KEEP=NO
  public void visitTraceDefinition (final IOmlTraceDefinition pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlTraceSequenceDefinition).booleanValue()) 
      visitTraceSequenceDefinition((IOmlTraceSequenceDefinition) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlTraceDefinitionItem).booleanValue()) 
        visitTraceDefinitionItem((IOmlTraceDefinitionItem) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlTraceChoiceDefinition).booleanValue()) 
          visitTraceChoiceDefinition((IOmlTraceChoiceDefinition) pNode);
        else {

          UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
          return;
        }
      }
  }
// ***** VDMTOOLS END Name=visitTraceDefinition


// ***** VDMTOOLS START Name=visitDefinitionBlock KEEP=NO
  public void visitDefinitionBlock (final IOmlDefinitionBlock pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlInstanceVariableDefinitions).booleanValue()) 
      visitInstanceVariableDefinitions((IOmlInstanceVariableDefinitions) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlOperationDefinitions).booleanValue()) 
        visitOperationDefinitions((IOmlOperationDefinitions) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlThreadDefinition).booleanValue()) 
          visitThreadDefinition((IOmlThreadDefinition) pNode);
        else {
          if (new Boolean(pNode instanceof IOmlValueDefinitions).booleanValue()) 
            visitValueDefinitions((IOmlValueDefinitions) pNode);
          else {
            if (new Boolean(pNode instanceof IOmlSynchronizationDefinitions).booleanValue()) 
              visitSynchronizationDefinitions((IOmlSynchronizationDefinitions) pNode);
            else {
              if (new Boolean(pNode instanceof IOmlFunctionDefinitions).booleanValue()) 
                visitFunctionDefinitions((IOmlFunctionDefinitions) pNode);
              else {
                if (new Boolean(pNode instanceof IOmlTraceDefinitions).booleanValue()) 
                  visitTraceDefinitions((IOmlTraceDefinitions) pNode);
                else {
                  if (new Boolean(pNode instanceof IOmlTypeDefinitions).booleanValue()) 
                    visitTypeDefinitions((IOmlTypeDefinitions) pNode);
                  else {

                    UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                    return;
                  }
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitDefinitionBlock


// ***** VDMTOOLS START Name=visitPatternBind KEEP=NO
  public void visitPatternBind (final IOmlPatternBind pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlPattern).booleanValue()) 
      visitPattern((IOmlPattern) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlBind).booleanValue()) 
        visitBind((IOmlBind) pNode);
      else {

        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
        return;
      }
  }
// ***** VDMTOOLS END Name=visitPatternBind


// ***** VDMTOOLS START Name=visitMode KEEP=NO
  public void visitMode (final IOmlMode var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitMode


// ***** VDMTOOLS START Name=visitFunctionShape KEEP=NO
  public void visitFunctionShape (final IOmlFunctionShape pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlTypelessExplicitFunction).booleanValue()) 
      visitTypelessExplicitFunction((IOmlTypelessExplicitFunction) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlExplicitFunction).booleanValue()) 
        visitExplicitFunction((IOmlExplicitFunction) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlImplicitFunction).booleanValue()) 
          visitImplicitFunction((IOmlImplicitFunction) pNode);
        else {
          if (new Boolean(pNode instanceof IOmlExtendedExplicitFunction).booleanValue()) 
            visitExtendedExplicitFunction((IOmlExtendedExplicitFunction) pNode);
          else {

            UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
            return;
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitFunctionShape


// ***** VDMTOOLS START Name=visitBinaryOperator KEEP=NO
  public void visitBinaryOperator (final IOmlBinaryOperator var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitBinaryOperator


// ***** VDMTOOLS START Name=visitStateDesignator KEEP=NO
  public void visitStateDesignator (final IOmlStateDesignator pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlFieldReference).booleanValue()) 
      visitFieldReference((IOmlFieldReference) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlMapOrSequenceReference).booleanValue()) 
        visitMapOrSequenceReference((IOmlMapOrSequenceReference) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlStateDesignatorName).booleanValue()) 
          visitStateDesignatorName((IOmlStateDesignatorName) pNode);
        else {

          UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
          return;
        }
      }
  }
// ***** VDMTOOLS END Name=visitStateDesignator


// ***** VDMTOOLS START Name=visitUnaryOperator KEEP=NO
  public void visitUnaryOperator (final IOmlUnaryOperator var_1_1) throws CGException {}
// ***** VDMTOOLS END Name=visitUnaryOperator


// ***** VDMTOOLS START Name=visitPattern KEEP=NO
  public void visitPattern (final IOmlPattern pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlTuplePattern).booleanValue()) 
      visitTuplePattern((IOmlTuplePattern) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlSetUnionPattern).booleanValue()) 
        visitSetUnionPattern((IOmlSetUnionPattern) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlPatternIdentifier).booleanValue()) 
          visitPatternIdentifier((IOmlPatternIdentifier) pNode);
        else {
          if (new Boolean(pNode instanceof IOmlSymbolicLiteralPattern).booleanValue()) 
            visitSymbolicLiteralPattern((IOmlSymbolicLiteralPattern) pNode);
          else {
            if (new Boolean(pNode instanceof IOmlRecordPattern).booleanValue()) 
              visitRecordPattern((IOmlRecordPattern) pNode);
            else {
              if (new Boolean(pNode instanceof IOmlMatchValue).booleanValue()) 
                visitMatchValue((IOmlMatchValue) pNode);
              else {
                if (new Boolean(pNode instanceof IOmlSetEnumPattern).booleanValue()) 
                  visitSetEnumPattern((IOmlSetEnumPattern) pNode);
                else {
                  if (new Boolean(pNode instanceof IOmlSeqConcPattern).booleanValue()) 
                    visitSeqConcPattern((IOmlSeqConcPattern) pNode);
                  else {
                    if (new Boolean(pNode instanceof IOmlSeqEnumPattern).booleanValue()) 
                      visitSeqEnumPattern((IOmlSeqEnumPattern) pNode);
                    else {
                      if (new Boolean(pNode instanceof IOmlDontCarePattern).booleanValue()) 
                        visitDontCarePattern((IOmlDontCarePattern) pNode);
                      else {

                        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
                        return;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
  }
// ***** VDMTOOLS END Name=visitPattern


// ***** VDMTOOLS START Name=visitTraceBinding KEEP=NO
  public void visitTraceBinding (final IOmlTraceBinding pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlTraceLetBinding).booleanValue()) 
      visitTraceLetBinding((IOmlTraceLetBinding) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlTraceLetBeBinding).booleanValue()) 
        visitTraceLetBeBinding((IOmlTraceLetBeBinding) pNode);
      else {

        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
        return;
      }
  }
// ***** VDMTOOLS END Name=visitTraceBinding


// ***** VDMTOOLS START Name=visitSyncPredicate KEEP=NO
  public void visitSyncPredicate (final IOmlSyncPredicate pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlMutexAllPredicate).booleanValue()) 
      visitMutexAllPredicate((IOmlMutexAllPredicate) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlPermissionPredicate).booleanValue()) 
        visitPermissionPredicate((IOmlPermissionPredicate) pNode);
      else {
        if (new Boolean(pNode instanceof IOmlMutexPredicate).booleanValue()) 
          visitMutexPredicate((IOmlMutexPredicate) pNode);
        else {

          UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
          return;
        }
      }
  }
// ***** VDMTOOLS END Name=visitSyncPredicate


// ***** VDMTOOLS START Name=visitTypeShape KEEP=NO
  public void visitTypeShape (final IOmlTypeShape pNode) throws CGException {
    if (new Boolean(pNode instanceof IOmlComplexType).booleanValue()) 
      visitComplexType((IOmlComplexType) pNode);
    else 
      if (new Boolean(pNode instanceof IOmlSimpleType).booleanValue()) 
        visitSimpleType((IOmlSimpleType) pNode);
      else {

        UTIL.RunTime("Run-Time Error:Can not evaluate an error statement");
        return;
      }
  }
// ***** VDMTOOLS END Name=visitTypeShape

}
;
