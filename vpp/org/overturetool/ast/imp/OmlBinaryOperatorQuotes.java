//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at Mon 07-Jul-2008 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Fri 06-Jun-2008 09:02:11)
//
// Supported compilers:
// jdk1.4
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
package org.overturetool.ast.imp;

// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=YES

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import org.overturetool.ast.itf.*;
// ***** VDMTOOLS END Name=imports



public class OmlBinaryOperatorQuotes implements IOmlBinaryOperatorQuotes {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp



































// ***** VDMTOOLS START Name=qmap KEEP=NO
  private static HashMap qmap = new HashMap();
// ***** VDMTOOLS END Name=qmap


// ***** VDMTOOLS START Name=static KEEP=NO
  static {
    try {

      OmlBinaryOperatorQuotes.qmap = new HashMap();
      OmlBinaryOperatorQuotes.qmap.put(IQMODIFY, new String("<MODIFY>"));
      OmlBinaryOperatorQuotes.qmap.put(IQGE, new String("<GE>"));
      OmlBinaryOperatorQuotes.qmap.put(IQLT, new String("<LT>"));
      OmlBinaryOperatorQuotes.qmap.put(IQPSUBSET, new String("<PSUBSET>"));
      OmlBinaryOperatorQuotes.qmap.put(IQMOD, new String("<MOD>"));
      OmlBinaryOperatorQuotes.qmap.put(IQMAPDOMRESBY, new String("<MAPDOMRESBY>"));
      OmlBinaryOperatorQuotes.qmap.put(IQINTER, new String("<INTER>"));
      OmlBinaryOperatorQuotes.qmap.put(IQCOMP, new String("<COMP>"));
      OmlBinaryOperatorQuotes.qmap.put(IQMINUS, new String("<MINUS>"));
      OmlBinaryOperatorQuotes.qmap.put(IQREM, new String("<REM>"));
      OmlBinaryOperatorQuotes.qmap.put(IQAND, new String("<AND>"));
      OmlBinaryOperatorQuotes.qmap.put(IQUNION, new String("<UNION>"));
      OmlBinaryOperatorQuotes.qmap.put(IQINSET, new String("<INSET>"));
      OmlBinaryOperatorQuotes.qmap.put(IQEQUIV, new String("<EQUIV>"));
      OmlBinaryOperatorQuotes.qmap.put(IQMAPRNGRESTO, new String("<MAPRNGRESTO>"));
      OmlBinaryOperatorQuotes.qmap.put(IQITERATE, new String("<ITERATE>"));
      OmlBinaryOperatorQuotes.qmap.put(IQSUBSET, new String("<SUBSET>"));
      OmlBinaryOperatorQuotes.qmap.put(IQMAPRNGRESBY, new String("<MAPRNGRESBY>"));
      OmlBinaryOperatorQuotes.qmap.put(IQTUPSEL, new String("<TUPSEL>"));
      OmlBinaryOperatorQuotes.qmap.put(IQNOTINSET, new String("<NOTINSET>"));
      OmlBinaryOperatorQuotes.qmap.put(IQMULTIPLY, new String("<MULTIPLY>"));
      OmlBinaryOperatorQuotes.qmap.put(IQIMPLY, new String("<IMPLY>"));
      OmlBinaryOperatorQuotes.qmap.put(IQOR, new String("<OR>"));
      OmlBinaryOperatorQuotes.qmap.put(IQGT, new String("<GT>"));
      OmlBinaryOperatorQuotes.qmap.put(IQPLUS, new String("<PLUS>"));
      OmlBinaryOperatorQuotes.qmap.put(IQMUNION, new String("<MUNION>"));
      OmlBinaryOperatorQuotes.qmap.put(IQMAPDOMRESTO, new String("<MAPDOMRESTO>"));
      OmlBinaryOperatorQuotes.qmap.put(IQEQ, new String("<EQ>"));
      OmlBinaryOperatorQuotes.qmap.put(IQDIV, new String("<DIV>"));
      OmlBinaryOperatorQuotes.qmap.put(IQDIFFERENCE, new String("<DIFFERENCE>"));
      OmlBinaryOperatorQuotes.qmap.put(IQCONC, new String("<CONC>"));
      OmlBinaryOperatorQuotes.qmap.put(IQLE, new String("<LE>"));
      OmlBinaryOperatorQuotes.qmap.put(IQDIVIDE, new String("<DIVIDE>"));
      OmlBinaryOperatorQuotes.qmap.put(IQNE, new String("<NE>"));
    }
    catch (Throwable e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=static


// ***** VDMTOOLS START Name=OmlBinaryOperatorQuotes KEEP=NO
  public OmlBinaryOperatorQuotes () throws CGException {}
// ***** VDMTOOLS END Name=OmlBinaryOperatorQuotes


// ***** VDMTOOLS START Name=getQuoteName KEEP=NO
  static public String getQuoteName (final Long pid) throws CGException {
    return UTIL.ConvertToString(qmap.get(pid));
  }
// ***** VDMTOOLS END Name=getQuoteName


// ***** VDMTOOLS START Name=validQuote KEEP=NO
  static public Boolean validQuote (final Long pid) throws CGException {

    Boolean rexpr_2 = null;
    rexpr_2 = new Boolean(qmap.containsKey(pid));
    return rexpr_2;
  }
// ***** VDMTOOLS END Name=validQuote

}
;
